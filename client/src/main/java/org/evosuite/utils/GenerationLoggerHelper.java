package org.evosuite.utils;

import org.evosuite.coverage.reachability.calcutator.ContextSimilarity;
import org.evosuite.testcase.TestCase;
import org.evosuite.testcase.statements.Statement;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class GenerationLoggerHelper {

    public static String testCaseToString(TestCase test, int maxLinesToShow) {
        List<String> statementStrings = test.getStatements().stream().map(Statement::getCode).collect(Collectors.toList());
        List<String> compressedFormat = GenerationLoggerHelper.getCompressedFormat(statementStrings, maxLinesToShow);
        return IntStream.range(0, compressedFormat.size())
                .mapToObj(i -> String.format("\t%s. %s;", i + 1, compressedFormat.get(i)))
                .collect(Collectors.joining("\n"));
    }

    public static String contextSimilaritiesToString(List<ContextSimilarity> similarities, DecimalFormat format, int maxLinesToShow) {
        List<String> similarityLines = new ArrayList<>();
        for (ContextSimilarity sim : similarities) {
            similarityLines.add(String.format("[%s] %s", format.format(sim.getScore()),
                    sim.getExecutedCalls().stream().map(Object::toString).collect(Collectors.joining(" -> "))));
        }
        return GenerationLoggerHelper.getCompressedFormat(similarityLines, maxLinesToShow)
                .stream()
                .map(s -> String.format("\t%s", s))
                .collect(Collectors.joining("\n"));
    }

    private static List<String> getCompressedFormat(List<String> allLines, int threshold) {
        List<String> linesToPrint = new ArrayList<>();
        if (allLines.size() > threshold) {
            List<String> firstStatements = allLines.subList(0, threshold - 3);
            List<String> lastStatements = allLines.subList(allLines.size() - 2, allLines.size());
            linesToPrint.addAll(firstStatements);
            linesToPrint.add("...");
            linesToPrint.addAll(lastStatements);
        } else {
            linesToPrint.addAll(allLines);
        }
        return linesToPrint;
    }
}
