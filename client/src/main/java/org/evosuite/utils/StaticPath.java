package org.evosuite.utils;

import org.evosuite.setup.callgraph.CallGraphEntry;

import java.io.Serializable;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StaticPath implements Serializable, Iterable<CallGraphEntry> {
    private final List<CallGraphEntry> nodes;

    public StaticPath() {
        this.nodes = new ArrayList<>();
    }

    public void add(CallGraphEntry node) {
        nodes.add(node);
    }

    public void add(int index, CallGraphEntry node) {
        nodes.add(index, node);
    }

    public int length() {
        return nodes.size();
    }

    public boolean contains(CallGraphEntry node) {
        return nodes.contains(node);
    }

    public Set<String> getCalledClasses() {
        return nodes.stream()
                .map(CallGraphEntry::getClassName)
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    public Set<String> getCalledMethods(String className) {
        return nodes.stream()
                .filter(a -> a.getClassName().equals(className))
                .map(CallGraphEntry::getMethodName)
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    public Stream<CallGraphEntry> stream() {
        return nodes.stream();
    }

    public CallGraphEntry get(int index) {
        return nodes.get(index);
    }

    public int getIndex(CallGraphEntry e) {
        return getIndex(e.getClassName(), e.getMethodName());
    }

    public int getIndex(String className, String methodName) {
        for (int i = 0; i < nodes.size(); i++) {
            CallGraphEntry node = nodes.get(i);
            if (node.getClassName().equals(className) && node.getMethodName().equals(methodName)) {
                return i;
            }
        }
        return -1;
    }

    public int getIndex(String className) {
        for (int i = 0; i < nodes.size(); i++) {
            CallGraphEntry node = nodes.get(i);
            if (node.getClassName().equals(className)) {
                return i;
            }
        }
        return -1;
    }

    public String getRootNodeName() {
        return nodes.size() > 0 ? getRootNode().toString() : null;
    }

    public CallGraphEntry getRootNode() {
        return nodes.size() > 0 ? nodes.get(0) : null;
    }

    public String getFinalNodeName() {
        return nodes.size() > 0 ? getFinalNode().toString() : null;
    }

    public CallGraphEntry getFinalNode() {
        return nodes.size() > 0 ? nodes.get(nodes.size() - 1) : null;
    }

    public StaticPath removeBefore(int i) {
        try {
            if (nodes.get(i) != null) {
                return removeBefore(nodes.get(i));
            }
            return clone();
        } catch (IndexOutOfBoundsException e) {
            return clone();
        }
    }

    public StaticPath removeBefore(CallGraphEntry e) {
        int index = getIndex(e);
        if (index == -1) {
            return clone();
        }
        StaticPath newPath = new StaticPath();
        for (int i = index; i < nodes.size(); i++) {
            newPath.add(nodes.get(i));
        }
        return newPath;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        StaticPath other = (StaticPath) obj;
        return nodes.equals(other.nodes);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + nodes.hashCode();
        return result;
    }

    public StaticPath clone() {
        StaticPath newPath = new StaticPath();
        nodes.forEach(newPath::add);
        return newPath;
    }

    @Override
    public String toString() {
        return "StaticPath: " + nodes;
    }

    @Override
    public Iterator<CallGraphEntry> iterator() {
        return nodes.iterator();
    }
}
