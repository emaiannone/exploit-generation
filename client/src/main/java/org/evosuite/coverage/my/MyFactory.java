package org.evosuite.coverage.my;

import org.evosuite.Properties;
import org.evosuite.TestGenerationContext;
import org.evosuite.graphs.GraphPool;
import org.evosuite.graphs.ccfg.ClassControlFlowGraph;
import org.evosuite.graphs.cfg.BytecodeAnalyzer;
import org.evosuite.graphs.cfg.CFGGenerator;
import org.evosuite.setup.TestUsageChecker;
import org.evosuite.testsuite.AbstractFitnessFactory;
import org.objectweb.asm.Type;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class MyFactory extends AbstractFitnessFactory<MyTestFitness> {

    @Override
    public List<MyTestFitness> getCoverageGoals() {
        // TODO: From package, prepare all fitness functions: start as one per method of CUT
        List<MyTestFitness> goals = new ArrayList<>();
        goals.add(new MyTestFitness(Properties.TARGET_CLASS, Properties.TARGET_METHOD));

        /*
        Class<?> clazz = Properties.getInitializedTargetClass();
        Set<String> constructors = getUsableConstructors(clazz);
        Set<String> methods = getUsableMethods(clazz);
        System.out.println(methods);
         */

        /*
        for (String constructor : constructors)
            goals.add(new MyTestFitness(className, constructor));

        for (String method : methods)
            goals.add(new MyTestFitness(className, method));

         */

        return goals;
    }

    private Set<String> getUsableConstructors(Class<?> clazz) {
        Set<String> constructors = new LinkedHashSet<>();
        Constructor<?>[] allConstructors = clazz.getDeclaredConstructors();
        for (Constructor<?> c : allConstructors) {
            if (TestUsageChecker.canUse(c)) {
                String methodName = "<init>" + Type.getConstructorDescriptor(c);
                constructors.add(methodName);
            }
        }
        return constructors;
    }

    private Set<String> getUsableMethods(Class<?> clazz) {
        Set<String> methods = new LinkedHashSet<>();
        Method[] allMethods = clazz.getDeclaredMethods();
        for (Method m : allMethods) {
            if (TestUsageChecker.canUse(m)) {
                String methodName = m.getName() + Type.getMethodDescriptor(m);
                methods.add(methodName);
            }
        }
        return methods;
    }
}
