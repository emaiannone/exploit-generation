package org.evosuite.coverage.vulnerability;

import org.evosuite.ga.Chromosome;
import org.evosuite.testcase.ExecutableChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.evosuite.testsuite.AbstractTestSuiteChromosome;
import org.evosuite.testsuite.TestSuiteFitnessFunction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class VulnerabilitySuiteFitness extends TestSuiteFitnessFunction {
    private static final long serialVersionUID = 42L;
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilitySuiteFitness.class);
    private final List<VulnerabilityTestFitness> totalGoals = new ArrayList<>();

    public VulnerabilitySuiteFitness() {
        List<VulnerabilityTestFitness> coverageGoals = new VulnerabilityFitnessFactory().getCoverageGoals();
        totalGoals.addAll(coverageGoals);
    }

    @Override
    public double getFitness(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite) {
        List<ExecutionResult> results = runTestSuite(suite);
        System.out.println("Suite: " + suite.getTestChromosomes().stream().map(Chromosome::hashCode).collect(Collectors.toList()));

        int numCovered;
        if (totalGoals.isEmpty() || results.stream().anyMatch(result -> result.hasTimeout() || result.hasTestException())) {
            numCovered = 0;
            System.out.println("No goals or timeout or exception: 0 covered");
        } else {
            Set<VulnerabilityTestFitness> coveredGoals = totalGoals.stream()
                    .filter(goal -> results.stream().anyMatch(goal::isCovered))
                    .collect(Collectors.toSet());
            numCovered = coveredGoals.size();
            System.out.println("Suite Covered Goals: " + numCovered + " / " + totalGoals.size());
        }
        double coverage = (double) numCovered / (double) totalGoals.size();
        double fitness = 1 - coverage;
        System.out.println("Suite Fitness: " + fitness);

        suite.setNumOfCoveredGoals(this, numCovered);
        suite.setNumOfNotCoveredGoals(this, totalGoals.size() - numCovered);
        suite.setCoverage(this, coverage);
        updateIndividual(this, suite, fitness);
        System.out.println();
        return fitness;
    }
}
