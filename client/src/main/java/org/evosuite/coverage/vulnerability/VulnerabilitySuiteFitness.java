package org.evosuite.coverage.vulnerability;

import org.evosuite.testcase.ExecutableChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.evosuite.testsuite.AbstractTestSuiteChromosome;
import org.evosuite.testsuite.TestSuiteFitnessFunction;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class VulnerabilitySuiteFitness extends TestSuiteFitnessFunction {

    private final Set<VulnerabilityTestFitness> goals = new HashSet<>();

    public VulnerabilitySuiteFitness() {
        goals.addAll(new VulnerabilityFitnessFactory().getCoverageGoals());
    }

    @Override
    public double getFitness(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite) {
        double suiteFitness;
        List<ExecutionResult> results = runTestSuite(suite);
        // TODO Do better formula
        Set<VulnerabilityTestFitness> coveredGoals = goals.stream()
                .filter(goal -> results.stream()
                        .anyMatch(goal::isCovered))
                .collect(Collectors.toSet());
        if (results.stream()
                .anyMatch(result -> result.hasTimeout() || result.hasTestException())) {
            suiteFitness = goals.size();
        } else {
            suiteFitness = goals.size() - coveredGoals.size();
        }

        suite.setNumOfCoveredGoals(this, coveredGoals.size());
        suite.setCoverage(this, !goals.isEmpty() ? (double) coveredGoals.size() / (double) goals.size() : 1.0);
        updateIndividual(this, suite, 0.5);
        return suiteFitness;
    }
}
