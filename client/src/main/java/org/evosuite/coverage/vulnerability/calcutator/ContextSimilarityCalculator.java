package org.evosuite.coverage.vulnerability.calcutator;

import org.evosuite.setup.Call;
import org.evosuite.setup.callgraph.CallGraphEntry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * Helper class that computes the context similarity of a call context in respect to a target call context.
 * The context similarity is the number of matched method calls divided the total number of methods in the target.
 */
public class ContextSimilarityCalculator {
    protected static final Logger logger = LoggerFactory.getLogger(ContextSimilarityCalculator.class);

    /**
     * Computes the context similarity of an executed call context with respect to a given target call context.
     * Function: sim = rawSim - penaltyFactor * rawSim
     * rawSim = number of matches (equal calls)
     * If the last calls matches, then sqrt(sim) is returned, otherwise sim
     *
     * @param executedContext The list of method calls to check the similarity for
     * @param targetContext   The list of method calls used as a reference
     * @return a value between 0 and 1. The closer to 1, the more similar the two call context.
     */
    public static double calculate(List<Call> executedContext, List<CallGraphEntry> targetContext) {
        List<Integer> matchScores = new ArrayList<>();
        int minSize = Math.min(executedContext.size(), targetContext.size());
        for (int i = 0; i < minSize; i++) {
            Call executedCall = executedContext.get(i);
            CallGraphEntry targetCall = targetContext.get(i);
            int score = compareCalls(executedCall, targetCall) ? 1 : 0;
            matchScores.add(score);
        }
        int sum = matchScores.stream().mapToInt(Integer::intValue).sum();
        double rawSim = (double) sum / targetContext.size();
        double penaltyFactor = (double) Math.abs(executedContext.size() - targetContext.size()) / Math.max(executedContext.size(), targetContext.size());
        double contextSim = rawSim - penaltyFactor * rawSim;
        Call lastCall = executedContext.get(executedContext.size() - 1);
        CallGraphEntry lastTargetCall = targetContext.get(targetContext.size() - 1);
        if (compareCalls(lastCall, lastTargetCall)) {
            return Math.sqrt(contextSim);
        } else {
            return contextSim;
        }
    }

    private static boolean compareCalls(Call executedCall, CallGraphEntry targetCall) {
        if (executedCall.getMethodName().equals(targetCall.getMethodName())) {
            return executedCall.getClassName().equals(targetCall.getClassName()); // Perfect match
        } else {
            return false; // No match
        }
    }

}
