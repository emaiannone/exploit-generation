package org.evosuite.coverage.vulnerability.calcutator;

import org.evosuite.coverage.vulnerability.VulnerabilityCoverageGoal;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Helper class that computes the context similarity of a call context in respect to a target call context.
 * The context similarity is the number of matched method calls divided the total number of methods in the target.
 */
public class ContextSimilarityCalculator {
    protected static final Logger logger = LoggerFactory.getLogger(ContextSimilarityCalculator.class);

    /**
     * Computes the context similarity of a call context with respect to a given target call context.
     * Function: sim = rawSim - penaltyFactor * rawSim
     * rawSim = number of matches (equal calls)
     * If the last calls matches, then sqrt(sim) is returned, otherwise sim
     *
     * @param callContext   The list of method calls to check the similarity for
     * @param targetContext The list of method calls used as a reference
     * @return a value between 0 and 1. The closer to 1, the more similar the two call context.
     */
    public static double calculate(List<Call> callContext, List<VulnerabilityCoverageGoal.Call> targetContext) {
        List<Integer> matchScores = new ArrayList<>();
        int minSize = Math.min(callContext.size(), targetContext.size());
        for (int i = 0; i < minSize; i++) {
            Call call = callContext.get(i);
            VulnerabilityCoverageGoal.Call targetCall = targetContext.get(i);
            int score = compareCalls(call, targetCall) ? 1 : 0;
            matchScores.add(score);
        }
        int sum = matchScores.stream().mapToInt(Integer::intValue).sum();
        double rawSim = (double) sum / targetContext.size();
        double penaltyFactor = (double) Math.abs(callContext.size() - targetContext.size()) / targetContext.size();
        double contextSim = rawSim - penaltyFactor * rawSim;
        Call lastCall = callContext.get(callContext.size() - 1);
        VulnerabilityCoverageGoal.Call lastTargetCall = targetContext.get(targetContext.size() - 1);
        if (compareCalls(lastCall, lastTargetCall)) {
            return Math.sqrt(contextSim);
        } else {
            return contextSim;
        }
    }

    private static boolean compareCalls(Call call, VulnerabilityCoverageGoal.Call targetCall) {
        if (call.getMethodName().equals(targetCall.getMethod())) {
            if (call.getClassName().equals(targetCall.getStaticCallerClass())) {
                return true; // Perfect match
            } else {
                // TODO Should give a different value?
                if (targetCall.getAlternativeCallerClasses().contains(call.getClassName())) {
                    return true; // Perfect match (for simplicity)
                } else {
                    return false; // No match because it was just an incidental method with same name
                }
            }
        } else {
            return false; // No match
        }
    }

    /**
     * Computes the context similarity of a call context with respect to a given target call context.
     * The context similarity is the number of matched method calls divided the total number of methods in the target.
     *
     * @param callContext   The list of method calls to check the similarity for
     * @param targetContext The list of method calls used as a reference
     * @return a value between 0 and 1. The bigger, the greater the number of matched with 1 meaning perfect match.
     */
    public static double calculate(CallContext callContext, CallContext targetContext) {
        Iterator<Call> currentIter = callContext.getContext().iterator();
        Iterator<Call> targetIter = targetContext.getContext().iterator();
        int matchNum = 0;
        boolean matched = true;
        while (matched && currentIter.hasNext() && targetIter.hasNext()) {
            Call currentCall = currentIter.next();
            Call targetCall = targetIter.next();
            matched = currentCall.equals(targetCall);
            if (matched) {
                matchNum++;
            }
        }
        double contextSimilarity = (double) matchNum / targetContext.getContext().size();
        //logger.debug("\t{} / {} = {} of {}", matchNum, targetContext.getContext().size(), contextSimilarity, callContext);
        return contextSimilarity;
    }
}
