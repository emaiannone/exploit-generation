package org.evosuite.coverage.vulnerability;

import org.evosuite.coverage.vulnerability.calcutator.VulnerabilityFitnessCalculator;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.TestFitnessFunction;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Objects;

public class VulnerabilityTestFitness extends TestFitnessFunction {
    private static final long serialVersionUID = 42L;
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityTestFitness.class);
    private final VulnerabilityCoverageGoal vulnerabilityCoverageGoal;

    public VulnerabilityTestFitness(VulnerabilityCoverageGoal vulnerabilityCoverageGoal) {
        this.vulnerabilityCoverageGoal = vulnerabilityCoverageGoal;
    }

    @Override
    public double getFitness(TestChromosome individual, ExecutionResult result) {
        double fitness = VulnerabilityFitnessCalculator.calculate(vulnerabilityCoverageGoal, individual, result);
        logger.debug("TC Fitness: {}", fitness);
        updateIndividual(individual, fitness);
        // TODO Should work, but double check if the progress bar does not full instantly
        individual.addFitness(this, fitness, 1 - fitness, fitness == 0 ? 1 : 0);
        if (fitness == 0.0) {
            logger.debug("-> Goal covered!\n");
        }
        return fitness;
    }

    @Override
    public int compareTo(TestFitnessFunction other) {
        if (other instanceof VulnerabilityTestFitness) {
            VulnerabilityTestFitness that = (VulnerabilityTestFitness) other;
            if (getTargetClass().equals(that.getTargetClass())) {
                return getTargetMethod().compareTo(that.getTargetMethod());
            } else {
                return getTargetClass().compareTo(that.getTargetClass());
            }
        }
        return compareClassName(other);
    }

    @Override
    public int hashCode() {
        return Objects.hash(vulnerabilityCoverageGoal);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        VulnerabilityTestFitness that = (VulnerabilityTestFitness) other;
        return Objects.equals(vulnerabilityCoverageGoal, that.vulnerabilityCoverageGoal);
    }

    @Override
    public String getTargetClass() {
        List<VulnerabilityCoverageGoal.Call> calls = this.vulnerabilityCoverageGoal.getCalls();
        return calls.get(calls.size() - 1).getStaticCallerClass();
    }

    @Override
    public String getTargetMethod() {
        List<VulnerabilityCoverageGoal.Call> calls = this.vulnerabilityCoverageGoal.getCalls();
        return calls.get(calls.size() - 1).getMethod();
    }

    @Override
    public String toString() {
        return "VulnerabilityTestFitness{" +
                "vulnerabilityGoal=" + vulnerabilityCoverageGoal +
                '}';
    }
}
