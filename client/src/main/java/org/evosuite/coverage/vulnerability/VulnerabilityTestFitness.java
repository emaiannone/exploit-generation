package org.evosuite.coverage.vulnerability;

import org.evosuite.TestGenerationContext;
import org.evosuite.coverage.branch.Branch;
import org.evosuite.coverage.branch.BranchPool;
import org.evosuite.coverage.branch.ControlFlowDistanceCalculator;
import org.evosuite.graphs.cfg.ControlDependency;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.TestFitnessFunction;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;

import java.util.*;
import java.util.stream.Collectors;

public class VulnerabilityTestFitness extends TestFitnessFunction {
    private static final long serialVersionUID = 42L;
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityTestFitness.class);

    private final int id;
    private final CallContext targetContext;
    // To avoid an RMI exception (due to a ClassLoader object inside the entire structure), this field has been made transient.
    // An alternative would be put transient keyword into the ClassLoader field in ByteCodeInstruction and BasicBlock classes.
    // Other solutions are well accepted
    private final transient List<ControlDependency> targetControlDependencies;
    private final int targetLine;

    public VulnerabilityTestFitness(int id, CallContext targetContext, List<ControlDependency> targetControlDependencies, int targetLine) {
        this.id = id;
        if (targetContext == null || targetControlDependencies == null || targetLine == 0) {
            throw new IllegalArgumentException("Invalid target call context, control dependencies or line");
        }
        this.targetContext = targetContext;
        this.targetControlDependencies = targetControlDependencies;
        this.targetLine = targetLine;
    }

    @Override
    public double getFitness(TestChromosome individual, ExecutionResult result) {
        logger.debug(MarkerFactory.getMarker("time"), "\n### Goal {} - TC {} ###", this.id, individual.getTestCase().getID());
        logger.debug("Test Code:");
        individual.getTestCase().iterator().forEachRemaining(st -> logger.debug("\t{}", st.getCode()));

        // Extract the distinct contexts and consider only the one rooted in target class and method (the others are useless)
        Set<CallContext> contextsRootedInTarget = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .filter(ctx -> ctx.getRootClassName().equals(targetContext.getRootClassName()))
                .filter(ctx -> ctx.getRootMethodName().equals(targetContext.getRootMethodName()))
                .collect(Collectors.toSet());

        double fitness;
        if (!contextsRootedInTarget.contains(targetContext)) {
            logger.debug("Target context NOT executed... computing Best Context Similarity (CS) with {}", targetContext);
            double bestContextSimilarity = contextsRootedInTarget.stream()
                    .map(callContext -> new ContextSimilarityCalculator(callContext, targetContext).compute())
                    .max(Comparator.naturalOrder()).orElse(0.0);
            logger.debug("\tBest CS: {}", bestContextSimilarity);
            // The fitness rewards the best matches of the target context
            fitness = 3.0 - bestContextSimilarity;
        } else {
            logger.debug("Target context IS executed... computing Approach Level (AL) with {}", targetControlDependencies);
            int approachLevel = new ApproachLevelCalculator(result, targetControlDependencies, targetContext).compute();
            logger.debug("\tAL: {}", approachLevel);
            if (approachLevel != 0) {
                logger.debug("Target control dependencies NOT fully covered");
                // TODO: Consider adding branch distance for a better fitness formula
                fitness = 2.0 - ((double) targetControlDependencies.size() - approachLevel) / targetControlDependencies.size();
            } else {
                if (targetControlDependencies.size() == 0) {
                    logger.debug("There are no control dependencies on target line... checking if target line {} is covered", targetLine);
                } else {
                    logger.debug("Target control dependencies ARE covered... checking if target line {} is covered", targetLine);
                }
                List<Call> calls = targetContext.getContext();
                Call leafCall = calls.get(calls.size() - 1);
                Set<Integer> coveredLines = result.getTrace().getCoverageData()
                        .get(leafCall.getClassName())
                        .get(leafCall.getMethodName())
                        .keySet();
                logger.debug("\tCovered lines in target method: {}", coveredLines);
                if (!coveredLines.contains(targetLine)) {
                    int closestLine = coveredLines.stream()
                            .filter(line -> line < targetLine)
                            .max(Comparator.naturalOrder()).orElse(-1);
                    logger.debug("\tMissing {} lines", targetLine - closestLine);
                    logger.debug("Line NOT covered");
                    int firstLine = coveredLines.stream().min(Comparator.naturalOrder()).orElse(-1);
                    fitness = 1.0 - (float) (closestLine - firstLine + 1) / (targetLine - firstLine + 1);
                } else {
                    logger.debug("Line IS covered");
                    fitness = 0.0;
                }
            }
        }
        logger.debug("TC Fitness: {}", fitness);
        updateIndividual(this, individual, fitness);
        if (fitness == 0.0) {
            logger.debug("\tGoal IS covered!");
            individual.getTestCase().addCoveredGoal(this);
        }
        return fitness;
    }

    @Override
    public int compareTo(TestFitnessFunction other) {
        if (other instanceof VulnerabilityTestFitness) {
            VulnerabilityTestFitness that = (VulnerabilityTestFitness) other;
            if (getTargetClass().equals(that.getTargetClass())) {
                return getTargetMethod().compareTo(that.getTargetMethod());
            } else {
                return getTargetClass().compareTo(that.getTargetClass());
            }
        }
        return compareClassName(other);
    }

    @Override
    public int hashCode() {
        return Objects.hash(targetContext, targetControlDependencies);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        VulnerabilityTestFitness that = (VulnerabilityTestFitness) other;
        return Objects.equals(targetContext, that.targetContext) &&
                Objects.equals(targetControlDependencies, that.targetControlDependencies);
    }

    @Override
    public String getTargetClass() {
        return this.targetContext.getRootClassName();
    }

    @Override
    public String getTargetMethod() {
        return this.targetContext.getRootMethodName();
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "VulnerabilityTestFitness{" +
                "targetContext=" + targetContext +
                ", targetCDBranches='" + targetControlDependencies + '\'' +
                ", targetLine=" + targetLine +
                '}';
    }
}
