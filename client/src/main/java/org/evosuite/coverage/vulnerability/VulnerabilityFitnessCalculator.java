package org.evosuite.coverage.vulnerability;

import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;

import java.io.Serializable;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class VulnerabilityFitnessCalculator implements Serializable {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessCalculator.class);
    private final VulnerabilityCoverageGoal vulnerabilityCoverageGoal;

    public VulnerabilityFitnessCalculator(VulnerabilityCoverageGoal vulnerabilityCoverageGoal) {
        this.vulnerabilityCoverageGoal = vulnerabilityCoverageGoal;
    }

    public double computeFitness(TestChromosome individual, ExecutionResult result) {
        logger.debug(MarkerFactory.getMarker("time"), "\n### Goal {} - TC {} (Gen {}, Eval {}) ###",
                vulnerabilityCoverageGoal.getId(), individual.getTestCase().getID(), individual.getAge(), individual.getNumberOfEvaluations());
        logger.debug("Test Code:");
        individual.getTestCase().iterator().forEachRemaining(st -> logger.debug("\t{}", st.getCode()));

        // Extract the distinct contexts and consider only the one rooted in target class and method (the others are useless)
        Set<CallContext> contextsRootedInTarget = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .filter(ctx -> ctx.getRootClassName().equals(vulnerabilityCoverageGoal.getTargetContext().getRootClassName()))
                .filter(ctx -> ctx.getRootMethodName().equals(vulnerabilityCoverageGoal.getTargetContext().getRootMethodName()))
                .collect(Collectors.toSet());

        double fitness;
        if (!contextsRootedInTarget.contains(vulnerabilityCoverageGoal.getTargetContext())) {
            logger.debug("Target context NOT executed... computing Best Context Similarity (CS) with {}", vulnerabilityCoverageGoal.getTargetContext());
            double bestContextSimilarity = contextsRootedInTarget.stream()
                    .map(callContext -> new ContextSimilarityCalculator(callContext, vulnerabilityCoverageGoal.getTargetContext()).compute())
                    .max(Comparator.naturalOrder()).orElse(0.0);
            logger.debug("\tBest CS: {}", bestContextSimilarity);
            // The fitness rewards the best matches of the target context
            fitness = 3.0 - bestContextSimilarity;
        } else {
            logger.debug("Target context IS executed... computing Approach Level (AL) with {}", vulnerabilityCoverageGoal.getTargetControlNodes());
            int approachLevel = new ApproachLevelCalculator(result, vulnerabilityCoverageGoal.getTargetControlNodes(), vulnerabilityCoverageGoal.getTargetContext()).compute();
            logger.debug("\tAL: {}", approachLevel);
            if (approachLevel != 0) {
                logger.debug("Target control nodes NOT fully covered");
                // TODO: Consider adding branch distance for a better fitness formula
                fitness = 2.0 - ((double) vulnerabilityCoverageGoal.getTargetControlNodes().size() - approachLevel) / vulnerabilityCoverageGoal.getTargetControlNodes().size();
            } else {
                if (vulnerabilityCoverageGoal.getTargetControlNodes().size() == 0) {
                    logger.debug("There are no control nodes on target line... checking if target line {} is covered", vulnerabilityCoverageGoal.getTargetLine());
                } else {
                    logger.debug("Target control nodes ARE covered... checking if target line {} is covered", vulnerabilityCoverageGoal.getTargetLine());
                }
                List<Call> calls = vulnerabilityCoverageGoal.getTargetContext().getContext();
                Call leafCall = calls.get(calls.size() - 1);
                Set<Integer> coveredLines = result.getTrace().getCoverageData()
                        .get(leafCall.getClassName())
                        .get(leafCall.getMethodName())
                        .keySet();
                logger.debug("\tCovered lines in target method: {}", coveredLines);
                if (!coveredLines.contains(vulnerabilityCoverageGoal.getTargetLine())) {
                    int closestLine = coveredLines.stream()
                            .filter(line -> line < vulnerabilityCoverageGoal.getTargetLine())
                            .max(Comparator.naturalOrder()).orElse(-1);
                    logger.debug("\tMissing {} lines", vulnerabilityCoverageGoal.getTargetLine() - closestLine);
                    logger.debug("Line NOT covered");
                    int firstLine = coveredLines.stream().min(Comparator.naturalOrder()).orElse(-1);
                    fitness = 1.0 - (float) (closestLine - firstLine + 1) / (vulnerabilityCoverageGoal.getTargetLine() - firstLine + 1);
                } else {
                    logger.debug("Line IS covered");
                    fitness = 0.0;
                }
            }
        }
        return fitness;
    }
}
