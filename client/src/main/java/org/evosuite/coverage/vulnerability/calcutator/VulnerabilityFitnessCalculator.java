package org.evosuite.coverage.vulnerability.calcutator;

import org.evosuite.coverage.vulnerability.VulnerabilityCoverageGoal;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;

import java.io.Serializable;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessCalculator implements Serializable {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessCalculator.class);

    public static double calculate(VulnerabilityCoverageGoal vulnerabilityCoverageGoal, TestChromosome individual, ExecutionResult result) {
        // TODO Consider adding a search listener (where?)
        logger.debug(MarkerFactory.getMarker("time"), "\n### Goal {} - TC {} (Gen {}, Eval {}) ###",
                vulnerabilityCoverageGoal.getId(), individual.getTestCase().getID(), individual.getAge(), individual.getNumberOfEvaluations());
        logger.debug("Goal: {}", vulnerabilityCoverageGoal);
        logger.debug("Test Code:");
        individual.getTestCase().iterator().forEachRemaining(st -> logger.debug("\t{};", st.getCode()));

        logger.debug("Successfully executed methods:\n\t{}", result.getTrace().getCoveredMethods());
        List<CallContext> executedContexts = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .collect(Collectors.toList());
        logger.debug("Executed {} contexts:", executedContexts.size());
        double bestContextSim = 0;
        for (int i = 0; i < executedContexts.size(); i++) {
            List<Call> executedContext = executedContexts.get(i).getContext();
            double contextSim = ContextSimilarityCalculator.calculate(executedContext, vulnerabilityCoverageGoal.getCalls());
            bestContextSim = Math.max(contextSim, bestContextSim);
            logger.debug("\t{}) (Sim: {}) {}", i + 1, contextSim, executedContext);
        }
        logger.debug("Best Context Similarity: {}", bestContextSim);
        double fitness = bestContextSim == 0 ? 1.0 : 1.0 - bestContextSim;
        return fitness;
    }
}
