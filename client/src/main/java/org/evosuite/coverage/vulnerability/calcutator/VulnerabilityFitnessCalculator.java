package org.evosuite.coverage.vulnerability.calcutator;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.coverage.vulnerability.VulnerabilityCoverageGoal;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessCalculator implements Serializable {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessCalculator.class);

    public static double calculate(VulnerabilityCoverageGoal vulnerabilityCoverageGoal, TestChromosome individual, ExecutionResult result) {
        // TODO Consider adding a search listener (where?)
        logger.debug(MarkerFactory.getMarker("time"), "\n## Goal {} - TC {} (Gen {}, Eval {}) ##",
                vulnerabilityCoverageGoal.getId(), individual.getTestCase().getID(), individual.getAge(), individual.getNumberOfEvaluations());
        logger.debug("Current Goal:\n-> {}\n", vulnerabilityCoverageGoal);
        List<String> individualStatements = Arrays.asList(individual.getTestCase().toCode().split("\n"));
        List<String> compressedStatements = getCompressedFormat(individualStatements, 4);
        logger.debug("Test Code ({} statements):\n> {}\n", individualStatements.size(), String.join("\n> ", compressedStatements));

        //individual.getTestCase().iterator().forEachRemaining(st -> logger.debug("\t{};", st.getCode()));
        //logger.debug("Executed {} methods:\n-> {}\n", result.getTrace().getCoveredMethods().size(), String.join("\n-> ", result.getTrace().getCoveredMethods()));

        // Compute all similarities, get the best and compute the fitness
        List<CallContext> executedContexts = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .collect(Collectors.toList());
        List<Pair<Double, CallContext>> similarities = new ArrayList<>();
        for (CallContext context : executedContexts) {
            List<Call> executedContext = context.getContext();
            double contextSim = ContextSimilarityCalculator.calculate(executedContext, vulnerabilityCoverageGoal.getCalls());
            similarities.add(new ImmutablePair<>(contextSim, context));
        }
        similarities.sort(Comparator.comparing(p -> -p.getLeft()));
        Pair<Double, CallContext> bestContext = similarities.get(0);
        double bestContextSim = bestContext.getLeft();
        double fitness = bestContextSim == 0 ? 1.0 : 1.0 - bestContextSim;

        // Logging before exiting
        List<String> similarityLines = new ArrayList<>();
        for (Pair<Double, CallContext> sim : similarities) {
            similarityLines.add(String.format("[Similarity: %s]: %s", sim.getLeft(),
                    sim.getRight().getContext().stream().map(Object::toString).collect(Collectors.joining(" -> "))));
        }
        List<String> compressedSimilarityLines = getCompressedFormat(similarityLines, 4);
        logger.debug("Executed {} distinct methods in {} contexts:", result.getTrace().getCoveredMethods().size(), executedContexts.size());
        logger.debug("> {}\n", String.join("\n> ", compressedSimilarityLines));
        logger.debug("Best Context Similarity: {}", bestContextSim);

        return fitness;
    }

    private static List<String> getCompressedFormat(List<String> allLines, int threshold) {
        List<String> linesToPrint = new ArrayList<>();
        if (allLines.size() > threshold) {
            List<String> firstStatements = allLines.subList(0, threshold - 2);
            List<String> lastStatements = allLines.subList(allLines.size() - 1, allLines.size());
            linesToPrint.addAll(firstStatements);
            linesToPrint.add("...");
            linesToPrint.addAll(lastStatements);
        } else {
            linesToPrint.addAll(allLines);
        }
        return linesToPrint;
    }
}
