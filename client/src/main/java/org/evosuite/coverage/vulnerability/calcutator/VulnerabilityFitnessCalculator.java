package org.evosuite.coverage.vulnerability.calcutator;

import org.evosuite.coverage.vulnerability.VulnerabilityCoverageGoal;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessCalculator implements Serializable {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessCalculator.class);

    public static double calculate(VulnerabilityCoverageGoal vulnerabilityCoverageGoal, TestChromosome individual, ExecutionResult result) {
        // TODO Consider adding a search listener (where?)
        logger.debug(MarkerFactory.getMarker("time"), "\n## Goal {} - TC {} (Gen {}, Eval {}) ##",
                vulnerabilityCoverageGoal.getId(), individual.getTestCase().getID(), individual.getAge(), individual.getNumberOfEvaluations());
        logger.debug("Current Goal:\n-> {}\n", vulnerabilityCoverageGoal);
        List<String> individualStatements = Arrays.asList(individual.getTestCase().toCode().split("\n"));
        List<String> statementsToPrint = new ArrayList<>();
        if (individualStatements.size() > 4) {
            List<String> firstStatements = individualStatements.subList(0, 2);
            List<String> lastStatements = individualStatements.subList(individualStatements.size() - 1, individualStatements.size());
            statementsToPrint.addAll(firstStatements);
            statementsToPrint.add("...");
            statementsToPrint.addAll(lastStatements);
        } else {
            statementsToPrint.addAll(individualStatements);
        }
        logger.debug("Test Code ({} statements):\n> {}\n", individualStatements.size(), String.join("\n> ", statementsToPrint));
        //individual.getTestCase().iterator().forEachRemaining(st -> logger.debug("\t{};", st.getCode()));

        //logger.debug("Executed {} methods:\n-> {}\n", result.getTrace().getCoveredMethods().size(), String.join("\n-> ", result.getTrace().getCoveredMethods()));
        List<CallContext> executedContexts = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .collect(Collectors.toList());
        logger.debug("Executed {} distinct methods in {} contexts (printing only non 0 similarities):", result.getTrace().getCoveredMethods().size(), executedContexts.size());
        double bestContextSim = 0;
        for (CallContext context : executedContexts) {
            List<Call> executedContext = context.getContext();
            double contextSim = ContextSimilarityCalculator.calculate(executedContext, vulnerabilityCoverageGoal.getCalls());
            bestContextSim = Math.max(contextSim, bestContextSim);
            if (contextSim > 0) {
                logger.debug("[Similarity: {}]\n  -> {}", contextSim, executedContext.stream().map(Call::toString).collect(Collectors.joining("\n  -> ")));
            }
        }
        logger.debug("\nBest Context Similarity: {}\n", bestContextSim);
        double fitness = bestContextSim == 0 ? 1.0 : 1.0 - bestContextSim;
        return fitness;
    }
}
