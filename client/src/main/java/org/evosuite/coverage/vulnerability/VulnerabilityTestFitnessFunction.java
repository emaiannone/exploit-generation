package org.evosuite.coverage.vulnerability;

import org.evosuite.coverage.vulnerability.calcutator.VulnerabilityFitnessCalculator;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.TestFitnessFunction;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Objects;

public class VulnerabilityTestFitnessFunction extends TestFitnessFunction {
    private static final long serialVersionUID = 42L;
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityTestFitnessFunction.class);
    private final VulnerabilityCoverageGoal vulnerabilityCoverageGoal;

    public VulnerabilityTestFitnessFunction(VulnerabilityCoverageGoal vulnerabilityCoverageGoal) {
        this.vulnerabilityCoverageGoal = vulnerabilityCoverageGoal;
    }

    @Override
    public double getFitness(TestChromosome individual, ExecutionResult result) {
        double fitness = VulnerabilityFitnessCalculator.calculate(vulnerabilityCoverageGoal, individual, result);
        logger.debug("TC Fitness: {}", fitness);
        updateIndividual(this, individual, fitness);
        if (fitness == 0.0) {
            logger.debug("\tGoal IS covered!");
            individual.getTestCase().addCoveredGoal(this);
            individual.setCoverage(this, 1);
        }
        return fitness;
    }

    @Override
    public int compareTo(TestFitnessFunction other) {
        if (other instanceof VulnerabilityTestFitnessFunction) {
            VulnerabilityTestFitnessFunction that = (VulnerabilityTestFitnessFunction) other;
            if (getTargetClass().equals(that.getTargetClass())) {
                return getTargetMethod().compareTo(that.getTargetMethod());
            } else {
                return getTargetClass().compareTo(that.getTargetClass());
            }
        }
        return compareClassName(other);
    }

    @Override
    public int hashCode() {
        return Objects.hash(vulnerabilityCoverageGoal);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        VulnerabilityTestFitnessFunction that = (VulnerabilityTestFitnessFunction) other;
        return Objects.equals(vulnerabilityCoverageGoal, that.vulnerabilityCoverageGoal);
    }

    @Override
    public String getTargetClass() {
        return this.vulnerabilityCoverageGoal.getTargetContext().getRootClassName();
    }

    @Override
    public String getTargetMethod() {
        return this.vulnerabilityCoverageGoal.getTargetContext().getRootMethodName();
    }

    @Override
    public String toString() {
        return "VulnerabilityTestFitness{" +
                "vulnerabilityGoal=" + vulnerabilityCoverageGoal +
                '}';
    }
}
