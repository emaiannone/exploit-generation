package org.evosuite.coverage.vulnerability;

import org.evosuite.TestGenerationContext;
import org.evosuite.coverage.branch.Branch;
import org.evosuite.graphs.cfg.BytecodeInstruction;
import org.evosuite.graphs.cfg.BytecodeInstructionPool;
import org.evosuite.setup.DependencyAnalysis;
import org.evosuite.setup.callgraph.CallGraph;
import org.evosuite.testsuite.AbstractFitnessFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessFactory extends AbstractFitnessFactory<VulnerabilityTestFitness> {
    private String vulnerableClass;
    private String vulnerableMethod;
    private int vulnerableLine;

    public VulnerabilityFitnessFactory() {
        this("com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary",
                "vulnerableMethodOfLibrary(Ljava/lang/String;)V",
                17);
    }

    public VulnerabilityFitnessFactory(String vulnerableClass, String vulnerableMethod, int vulnerableLine) {
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
    }

    @Override
    public List<VulnerabilityTestFitness> getCoverageGoals() {
        System.out.println("Target Class::Method: " + vulnerableClass + "::" + vulnerableMethod);

        // Get the bytecode instruction at the vulnerable line
        BytecodeInstructionPool instructionPool = BytecodeInstructionPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT());
        List<BytecodeInstruction> instructionsAtLine = instructionPool
                .getInstructionsIn(vulnerableClass, vulnerableMethod).stream()
                .filter(i -> i.getBasicBlock() != null && i.getLineNumber() == vulnerableLine)
                .collect(Collectors.toList());
        if (instructionsAtLine.size() == 0) {
            System.out.println("\tExpected to be impossible!");
            return new ArrayList<>();
        }

        // Instructions within the same line share the same control dependencies (the CD are of the block), so I can safely take any element
        List<Branch> allCDBranches = getAllCDBranches(instructionsAtLine.get(0));
        System.out.println("\tInstruction at line " + vulnerableLine + ": ");
        instructionsAtLine.forEach(i -> System.out.println("\t\t" + i));
        System.out.println("\tCD Branches: ");
        allCDBranches.forEach(branch -> System.out.println("\t\t" + branch));

        List<VulnerabilityTestFitness> goals = this.prepareGoals(allCDBranches);
        if (goals.size() == 0) {
            System.out.println("\tTarget is never called");
        } else {
            System.out.println("\tThese are the produced goals: ");
            goals.forEach(g -> System.out.println("\t\t" + g));
        }
        System.out.println();
        return goals;
    }

    /**
     * Recursive method that collects all control dependant branches starting from argument instruction up to root of the instruction's CDG.
     * The order of branches starts from the most inner one, so from the deepest to the shallowest.
     *
     * @param instruction starting bytecode instruction
     * @return list of branches that has a control dependencies on the starting instruction
     */
    private static List<Branch> getAllCDBranches(BytecodeInstruction instruction) {
        List<Branch> branches = new ArrayList<>();
        if (instruction == null || instruction.getControlDependentBranch() == null) {
            return branches;
        }
        Branch cdBranch = instruction.getControlDependentBranch();
        branches.add(cdBranch);
        branches.addAll(getAllCDBranches(cdBranch.getInstruction()));
        return branches;
    }

    /**
     * Helper method to take care of fitness goals preparation.
     *
     * @param cdBranches list of control dependent branches to be aware of
     * @return list of fitness goals composed of target call context and the list of control dependent branches
     */
    private List<VulnerabilityTestFitness> prepareGoals(List<Branch> cdBranches) {
        // First check if the vulnerable method is statically called
        CallGraph callGraph = DependencyAnalysis.getCallGraph();
        if (!callGraph.isCalledMethod(vulnerableClass, vulnerableMethod)) {
            return new ArrayList<>();
        }
        // Then, build the goals composed of context and CD branches on vulnerable line
        return callGraph
                .getAllContextsFromTargetClass(vulnerableClass, vulnerableMethod)
                .stream()
                .filter(cc -> !cc.isEmpty())
                .map(cc -> new VulnerabilityTestFitness(cc, cdBranches))
                .collect(Collectors.toList());
    }
}
