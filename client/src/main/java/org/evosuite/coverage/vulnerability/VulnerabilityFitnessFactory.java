package org.evosuite.coverage.vulnerability;

import org.evosuite.Properties;
import org.evosuite.testsuite.AbstractFitnessFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessFactory extends AbstractFitnessFactory<VulnerabilityTestFitnessFunction> {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessFactory.class);
    private final VulnerabilityDescription vulnerabilityDescription;
    private final VulnerabilityCoverageGoalsPreparer vulnerabilityCoverageGoalsPreparer;
    private List<VulnerabilityTestFitnessFunction> coverageGoals;

    public VulnerabilityFitnessFactory() {
        this(Properties.VULN_CLASS, Properties.VULN_METHOD, Properties.VULN_LINE);
    }

    public VulnerabilityFitnessFactory(String vulnerableClass, String vulnerableMethod, int vulnerableLine) {
        logger.debug("\n### Creation of FitnessFactory ###");
        this.vulnerabilityDescription = new VulnerabilityDescription(vulnerableClass, vulnerableMethod, vulnerableLine);
        this.vulnerabilityCoverageGoalsPreparer = new VulnerabilityCoverageGoalsPreparer();
        this.coverageGoals = null;
    }

    /**
     * Generate coverage goals as required by EvoSuite.
     *
     * @return the list of EvoSuite coverage goals.
     * @throws IllegalArgumentException if bytecode instruction of the vulnerable target cannot be not found.
     */
    @Override
    public List<VulnerabilityTestFitnessFunction> getCoverageGoals() {
        if (coverageGoals == null) {
            coverageGoals = vulnerabilityCoverageGoalsPreparer.prepareCoverageGoals(vulnerabilityDescription)
                    .stream()
                    .map(VulnerabilityTestFitnessFunction::new)
                    .collect(Collectors.toList());
        }
        return coverageGoals;
    }
}
