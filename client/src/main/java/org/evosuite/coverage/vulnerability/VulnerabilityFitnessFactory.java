package org.evosuite.coverage.vulnerability;

import org.evosuite.instrumentation.LinePool;
import org.evosuite.setup.CallContext;
import org.evosuite.setup.DependencyAnalysis;
import org.evosuite.setup.callgraph.CallGraph;
import org.evosuite.testsuite.AbstractFitnessFactory;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class VulnerabilityFitnessFactory extends AbstractFitnessFactory<VulnerabilityTestFitness> {
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VulnerabilityFitnessFactory.class.getName());

    private String vulnerableClass;
    private String vulnerableMethod;
    private String vulnerableLine;
    private String targetInput;

    public VulnerabilityFitnessFactory() {
        this.vulnerableClass = "com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary";
        this.vulnerableMethod = "vulnerableMethodOfLibrary(Ljava/lang/String;)V";
        this.vulnerableLine = "18";
        this.targetInput = "badInput123";
    }

    public VulnerabilityFitnessFactory(String vulnerableClass, String vulnerableMethod, String vulnerableLine, String targetInput) {
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
        this.targetInput = targetInput;
    }

    @Override
    public List<VulnerabilityTestFitness> getCoverageGoals() {
        Set<Integer> lines = LinePool.getLines(vulnerableClass, vulnerableMethod);
        logger.info("Lines of vulnerable method: " + lines.toString());

        // First check if the vulnerable method is statically called
        CallGraph callGraph = DependencyAnalysis.getCallGraph();
        if (!callGraph.isCalledMethod(vulnerableClass, vulnerableMethod)) {
            logger.info("Vulnerable Method of vulnerable class is not statically called");
            return new ArrayList<>();
        }

        // Then, build the goals composed of
        Set<VulnerabilityTestFitness> goals = new HashSet<>();
        Set<CallContext> allContextsFromTargetClass = callGraph.getAllContextsFromTargetClass(vulnerableClass, vulnerableMethod);
        logger.info("Contexts of " + vulnerableClass + "::" + vulnerableMethod);
        for (CallContext context : allContextsFromTargetClass) {
            if (!context.isEmpty()) {
                // TODO Other checks?
                goals.add(new VulnerabilityTestFitness(context, targetInput));
                logger.info("\t" + context);
            }
        }
        System.out.println("These are the produced goals: ");
        goals.forEach(System.out::println);
        System.out.println();
        return new ArrayList<>(goals);
    }
}
