package org.evosuite.coverage.vulnerability;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.evosuite.Properties;
import org.evosuite.coverage.vulnerability.exceptions.UnreachableVulnerableTarget;
import org.evosuite.testsuite.AbstractFitnessFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessFactory extends AbstractFitnessFactory<VulnerabilityTestFitness> {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessFactory.class);
    private final VulnerabilityDescription vulnerabilityDescription;

    private List<VulnerabilityTestFitness> coverageGoals;

    public VulnerabilityFitnessFactory() {
        this(Properties.SIEGE_TARGET_CLASS, Properties.SIEGE_TARGET_METHOD);
    }

    public VulnerabilityFitnessFactory(String vulnerableClass, String vulnerableMethod) {
        GenerationLogger generationLogger = new GenerationLogger(Properties.SIEGE_LOG_FILE);
        generationLogger.write("# Starting Evolution #");
        generationLogger.write("## Creation of FitnessFactory ##");
        this.vulnerabilityDescription = new VulnerabilityDescription(vulnerableClass, vulnerableMethod);
    }

    @Override
    public List<VulnerabilityTestFitness> getCoverageGoals() {
        // NOTE EvoSuite calls this function many times, so it is better avoid recreating the same goals over and over again
        if (coverageGoals == null) {
            try {
                coverageGoals = VulnerabilityCoverageGoalsPreparer.prepare(vulnerabilityDescription)
                        .stream()
                        .map(VulnerabilityTestFitness::new)
                        .collect(Collectors.toList());
            } catch (UnreachableVulnerableTarget e) {
                logger.error(ExceptionUtils.getStackTrace(e));
                return new ArrayList<>();
            }
        }
        return coverageGoals;
    }
}
