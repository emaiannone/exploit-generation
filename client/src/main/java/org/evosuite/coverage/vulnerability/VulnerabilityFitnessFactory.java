package org.evosuite.coverage.vulnerability;

import org.evosuite.Properties;
import org.evosuite.coverage.vulnerability.exceptions.UnreachableVulnerableMethod;
import org.evosuite.coverage.vulnerability.exceptions.UnknownVulnerableLine;
import org.evosuite.testsuite.AbstractFitnessFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityFitnessFactory extends AbstractFitnessFactory<VulnerabilityTestFitness> {
    protected static final Logger logger = LoggerFactory.getLogger(VulnerabilityFitnessFactory.class);
    private final VulnerabilityDescription vulnerabilityDescription;

    // EvoSuite calls getCoverageGoals() many times, so it is better avoid recreating the same goals over and over again
    private List<VulnerabilityTestFitness> coverageGoals;

    public VulnerabilityFitnessFactory() {
        this(Properties.VULN_CLASS, Properties.VULN_METHOD, Properties.VULN_LINE);
    }

    public VulnerabilityFitnessFactory(String vulnerableClass, String vulnerableMethod, int vulnerableLine) {
        logger.debug("\n### Creation of FitnessFactory ###");
        this.vulnerabilityDescription = new VulnerabilityDescription(vulnerableClass, vulnerableMethod, vulnerableLine);
    }

    @Override
    public List<VulnerabilityTestFitness> getCoverageGoals() {
        if (coverageGoals == null) {
            try {
                coverageGoals = VulnerabilityCoverageGoalsPreparer.prepare(vulnerabilityDescription)
                        .stream()
                        .map(VulnerabilityTestFitness::new)
                        .collect(Collectors.toList());
            } catch (UnknownVulnerableLine | UnreachableVulnerableMethod e) {
                logger.debug("", e);
                throw e;
            }
        }
        return coverageGoals;
    }
}
