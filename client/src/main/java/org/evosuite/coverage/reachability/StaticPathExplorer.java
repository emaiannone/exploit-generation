package org.evosuite.coverage.reachability;

import org.evosuite.Properties;
import org.evosuite.setup.DependencyAnalysis;
import org.evosuite.setup.callgraph.CallGraph;
import org.evosuite.setup.callgraph.CallGraphEntry;

import java.util.LinkedHashSet;
import java.util.Set;

public class StaticPathExplorer {

    public static Set<StaticPath> staticPathsToTarget(String targetClass, String targetMethod) {
        CallGraph clientCallGraph = DependencyAnalysis.getCallGraph();
        CallGraphEntry targetNode = clientCallGraph.getViewOfCurrentMethods()
                .stream()
                .filter(node -> node.getClassName().equals(targetClass) && node.getMethodName().equals(targetMethod))
                .findFirst().orElse(null);
        if (targetNode == null) {
            new GenerationLogger(Properties.SIEGE_LOG_FILE).write(String.format("Method %s.%s is not called via any class in the classpath.", targetClass, targetMethod));
            return null;
        }
        return findStaticPathsToNode(clientCallGraph, targetNode);
    }

    private static Set<StaticPath> findStaticPathsToNode(CallGraph callGraph, CallGraphEntry targetNode) {
        Set<StaticPath> allPaths = new LinkedHashSet<>();
        Set<CallGraphEntry> incomingNodes = callGraph.getCallsFromMethod(targetNode);
        if (incomingNodes.size() > 0) {
            for (CallGraphEntry incomingNode : incomingNodes) {
                // Ignore nodes that call themselves, as they would give stack overflow
                if (targetNode.equals(incomingNode)) {
                    continue;
                }
                Set<StaticPath> incomingPaths = findStaticPathsToNode(callGraph, incomingNode);
                allPaths.addAll(incomingPaths);
            }
            for (StaticPath allCallPath : allPaths) {
                allCallPath.add(allCallPath.length(), targetNode);
            }
        } else {
            StaticPath incomingPath = new StaticPath();
            incomingPath.add(targetNode);
            allPaths.add(incomingPath);
        }
        return allPaths;
    }
}
