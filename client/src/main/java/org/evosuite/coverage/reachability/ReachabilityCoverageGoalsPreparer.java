package org.evosuite.coverage.reachability;

import org.evosuite.Properties;
import org.evosuite.coverage.reachability.exceptions.UnreachableTarget;
import org.evosuite.setup.DependencyAnalysis;
import org.evosuite.setup.callgraph.CallGraph;
import org.evosuite.setup.callgraph.CallGraphEntry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class ReachabilityCoverageGoalsPreparer {
    protected static final Logger logger = LoggerFactory.getLogger(ReachabilityCoverageGoalsPreparer.class);

    public static List<ReachabilityCoverageGoal> prepare(ReachabilityTarget reachabilityTarget) throws UnreachableTarget {
        GenerationLogger generationLogger = new GenerationLogger(Properties.SIEGE_LOG_FILE);
        generationLogger.write("Creating test goals...");
        generationLogger.write(String.format("\t[TARGET] %s:%s", reachabilityTarget.getTargetClass(), reachabilityTarget.getTargetMethod()));
        generationLogger.write(String.format("\t[CLIENT] %s", Properties.TARGET_CLASS));
        //generationLogger.write("Public methods: " + GraphPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getCCFG(reachabilityTarget.getTargetClass()).publicMethods);
        //generationLogger.write("CDG? " + GraphPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getCDG(reachabilityTarget.getTargetClass(), reachabilityTarget.getTargetMethod()));

        List<ReachabilityCoverageGoal> goals = createGoals(reachabilityTarget.getTargetClass(), reachabilityTarget.getTargetMethod());
        generationLogger.write("Goals created:");
        for (ReachabilityCoverageGoal goal : goals) {
            generationLogger.write(String.format("\t[Goal #%s] %s", goal.getId(), goal.getCalls().stream().map(Object::toString).collect(Collectors.joining("\n\t\t"))));
        }
        return goals;
    }

    private static List<ReachabilityCoverageGoal> createGoals(String targetClass, String targetMethod) {
        Set<List<CallGraphEntry>> paths = staticPathsToTarget(targetClass, targetMethod);
        if (paths == null) {
            throw new UnreachableTarget("The target method cannot be reached from the client class. No goals can be created.");
        }
        GenerationLogger generationLogger = new GenerationLogger(Properties.SIEGE_LOG_FILE);
        generationLogger.write("Static paths found:");
        for (List<CallGraphEntry> path : paths) {
            generationLogger.write(String.format("\t%s", path.stream().map(Object::toString).collect(Collectors.joining("\n\t\t"))));
        }
        // Select paths rooted in the client class only
        Set<List<CallGraphEntry>> relevantPaths = paths.stream().filter(p -> p.get(0).getClassName().equals(Properties.TARGET_CLASS)).collect(Collectors.toSet());
        //generationLogger.write("Static Paths rooted in {}:\n-> {}\n", Properties.TARGET_CLASS, relevantPaths.stream().map(Object::toString).collect(Collectors.joining("\n-> ")));
        // Make the new goals from these relevant paths
        List<ReachabilityCoverageGoal> goals = new ArrayList<>();
        int id = 0;
        for (List<CallGraphEntry> p : relevantPaths) {
            goals.add(new ReachabilityCoverageGoal(id, p));
            id++;
        }
        return goals;
    }

    private static Set<List<CallGraphEntry>> staticPathsToTarget(String targetClass, String targetMethod) {
        CallGraph clientCallGraph = DependencyAnalysis.getCallGraph();
        CallGraphEntry targetNode = clientCallGraph.getViewOfCurrentMethods()
                .stream()
                .filter(node -> node.getClassName().equals(targetClass) && node.getMethodName().equals(targetMethod))
                .findFirst().orElse(null);
        if (targetNode == null) {
            new GenerationLogger(Properties.SIEGE_LOG_FILE).write(String.format("Method %s.%s is not called via any class in the classpath.", targetClass, targetMethod));
            return null;
        }
        return staticPathsToNode(clientCallGraph, targetNode);
    }

    private static Set<List<CallGraphEntry>> staticPathsToNode(CallGraph callGraph, CallGraphEntry node) {
        Set<List<CallGraphEntry>> allPaths = new LinkedHashSet<>();
        Set<CallGraphEntry> incomingNodes = callGraph.getCallsFromMethod(node);
        if (incomingNodes.size() > 0) {
            for (CallGraphEntry incomingNode : incomingNodes) {
                Set<List<CallGraphEntry>> incomingPaths = staticPathsToNode(callGraph, incomingNode);
                allPaths.addAll(incomingPaths);
            }
            for (List<CallGraphEntry> allCallPath : allPaths) {
                allCallPath.add(allCallPath.size(), node);
            }
        } else {
            List<CallGraphEntry> incomingPath = new ArrayList<>();
            incomingPath.add(node);
            allPaths.add(incomingPath);
        }
        return allPaths;
    }
}
