package org.evosuite.coverage.reachability.calcutator;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.Properties;
import org.evosuite.TestGenerationContext;
import org.evosuite.coverage.branch.Branch;
import org.evosuite.coverage.branch.BranchPool;
import org.evosuite.coverage.reachability.GenerationLogger;
import org.evosuite.coverage.reachability.ReachabilityCoverageGoal;
import org.evosuite.setup.Call;
import org.evosuite.setup.CallContext;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class ReachabilityFitnessCalculator implements Serializable {
    protected static final Logger logger = LoggerFactory.getLogger(ReachabilityFitnessCalculator.class);

    public static double calculate(ReachabilityCoverageGoal reachabilityCoverageGoal, TestChromosome individual, ExecutionResult result) {
        GenerationLogger generationLogger = new GenerationLogger(Properties.SIEGE_LOG_FILE);
        generationLogger.write(String.format("\n* TestCase n.%s (From gen. #%s, Eval. #%s)",
                individual.getTestCase().getID(), individual.getAge(), individual.getNumberOfEvaluations()));
        List<String> individualStatements = Arrays.asList(individual.getTestCase().toCode().split("\n"));
        generationLogger.write(String.format("Code (%s statements):\n> %s", individualStatements.size(), String.join("\n> ", getCompressedFormat(individualStatements, 4))));

        //individual.getTestCase().iterator().forEachRemaining(st -> generationLogger.write("\t{};", st.getCode()));
        //generationLogger.write("Executed {} methods:\n-> {}\n", result.getTrace().getCoveredMethods().size(), String.join("\n-> ", result.getTrace().getCoveredMethods()));
        if (Properties.BRANCH_AWARENESS) {
            // TODO Rework the fitness computation with branch awareness
            BranchPool branchPool = BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT());
            Map<Integer, Branch> coveredFalseBranches = result.getTrace().getCoveredFalseBranches().stream().collect(Collectors.toMap(Function.identity(), branchPool::getBranch));
            Map<Integer, Branch> coveredTrueBranches = result.getTrace().getCoveredTrueBranches().stream().collect(Collectors.toMap(Function.identity(), branchPool::getBranch));
            generationLogger.write(String.format("Branches evaluated False: %s", coveredFalseBranches));
            generationLogger.write(String.format("Branches evaluated True: %s", coveredTrueBranches));
        }
        // Compute all similarities, get the best and compute the fitness
        List<CallContext> executedContexts = result.getTrace().getMethodContextCount().entrySet()
                .stream()
                .flatMap(entry -> entry.getValue().keySet().stream())
                .collect(Collectors.toList());
        if (executedContexts.size() == 0) {
            generationLogger.write("The test could not execute anything :(");
            return 1.0;
        }
        List<Pair<Double, CallContext>> similarities = new ArrayList<>();
        for (CallContext context : executedContexts) {
            List<Call> executedContext = context.getContext();
            // TODO Should send the list of CallUnits instead the list of CallGraphEntries. Then, inside calculate(), if branch list is empty, behaves like usual. If not empty, compute BranchDistance.
            double contextSim = ContextSimilarityCalculator.calculate(executedContext, reachabilityCoverageGoal.getCalls());
            similarities.add(new ImmutablePair<>(contextSim, context));
        }
        similarities.sort(Comparator.comparing(p -> -p.getLeft()));
        Pair<Double, CallContext> bestContext = similarities.get(0);
        double bestContextSim = bestContext.getLeft();
        double fitness = bestContextSim == 0 ? 1.0 : 1.0 - bestContextSim;

        // Logging before exiting
        DecimalFormat decimalFormat = new DecimalFormat("0.000");
        List<String> similarityLines = new ArrayList<>();
        for (Pair<Double, CallContext> sim : similarities) {
            similarityLines.add(String.format("[Similarity: %s] %s", decimalFormat.format(sim.getLeft()),
                    sim.getRight().getContext().stream().map(Object::toString).collect(Collectors.joining(" -> "))));
        }
        generationLogger.write(String.format("The test executed %s distinct methods in %s contexts. Computing similarities for [Goal #%s]:", result.getTrace().getCoveredMethods().size(), executedContexts.size(), reachabilityCoverageGoal.getId()));
        getCompressedFormat(similarityLines, 4).stream().map(s -> String.format("\t%s", s)).forEach(generationLogger::write);
        generationLogger.write(String.format("Best Context Similarity: %s", decimalFormat.format(bestContextSim)));
        return fitness;
    }

    private static List<String> getCompressedFormat(List<String> allLines, int threshold) {
        List<String> linesToPrint = new ArrayList<>();
        if (allLines.size() > threshold) {
            List<String> firstStatements = allLines.subList(0, threshold - 2);
            List<String> lastStatements = allLines.subList(allLines.size() - 1, allLines.size());
            linesToPrint.addAll(firstStatements);
            linesToPrint.add("...");
            linesToPrint.addAll(lastStatements);
        } else {
            linesToPrint.addAll(allLines);
        }
        return linesToPrint;
    }
}
