package org.evosuite.coverage.reachability;

import org.evosuite.setup.callgraph.CallGraphEntry;

import java.io.Serializable;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StaticPath implements Serializable, Iterable<CallGraphEntry> {
    private final List<CallGraphEntry> nodes;

    public StaticPath() {
        this.nodes = new ArrayList<>();
    }

    public void add(CallGraphEntry node) {
        nodes.add(node);
    }

    public void add(int index, CallGraphEntry node) {
        nodes.add(index, node);
    }

    public int length() {
        return nodes.size();
    }

    public boolean contains(CallGraphEntry node) {
        return nodes.contains(node);
    }

    public Set<String> getCalledClasses() {
        return nodes.stream()
                .map(CallGraphEntry::getClassName)
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    public Stream<CallGraphEntry> stream() {
        return nodes.stream();
    }

    public CallGraphEntry get(int index) {
        return nodes.get(index);
    }

    public String getRootNodeName() {
        return nodes.size() > 0 ? getRootNode().toString() : null;
    }

    public CallGraphEntry getRootNode() {
        return nodes.size() > 0 ? nodes.get(0) : null;
    }

    public String getFinalNodeName() {
        return nodes.size() > 0 ? getFinalNode().toString() : null;
    }

    public CallGraphEntry getFinalNode() {
        return nodes.size() > 0 ? nodes.get(nodes.size() - 1) : null;
    }

    public StaticPath clone() {
        StaticPath newPath = new StaticPath();
        nodes.forEach(newPath::add);
        return newPath;
    }

    @Override
    public String toString() {
        return "StaticPath: " + nodes;
    }

    @Override
    public Iterator<CallGraphEntry> iterator() {
        return nodes.iterator();
    }
}
