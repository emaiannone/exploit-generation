package org.evosuite.coverage.reachability;

import org.evosuite.Properties;
import org.evosuite.coverage.reachability.calcutator.ReachabilityFitnessCalculator;
import org.evosuite.setup.callgraph.CallGraphEntry;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.TestFitnessFunction;
import org.evosuite.testcase.execution.ExecutionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.DecimalFormat;
import java.util.List;
import java.util.Objects;

public class ReachabilityTestFitnessFunction extends TestFitnessFunction {
    private static final long serialVersionUID = 42L;
    protected static final Logger logger = LoggerFactory.getLogger(ReachabilityTestFitnessFunction.class);
    private final ReachabilityCoverageGoal reachabilityCoverageGoal;

    public ReachabilityTestFitnessFunction(ReachabilityCoverageGoal reachabilityCoverageGoal) {
        this.reachabilityCoverageGoal = reachabilityCoverageGoal;
    }

    @Override
    public double getFitness(TestChromosome individual, ExecutionResult result) {
        double fitness = ReachabilityFitnessCalculator.calculate(reachabilityCoverageGoal, individual, result);
        GenerationLogger generationLogger = new GenerationLogger(Properties.SIEGE_LOG_FILE);
        generationLogger.write(String.format("TC Fitness for [Goal #%s]: %s", reachabilityCoverageGoal.getId(), fitness != Double.MAX_VALUE ? new DecimalFormat("0.000").format(fitness) : "MAX"));
        updateIndividual(individual, fitness);
        // NOTE Should work, but double check if the progress bar does not fill instantly
        individual.addFitness(this, fitness, fitness > 1 ? 1 - fitness : 0, fitness == 0.0 ? 1 : 0);
        if (fitness == 0.0) {
            generationLogger.write("\tCovered!");
        }
        return fitness;
    }

    @Override
    public int compareTo(TestFitnessFunction other) {
        if (other instanceof ReachabilityTestFitnessFunction) {
            ReachabilityTestFitnessFunction that = (ReachabilityTestFitnessFunction) other;
            if (getTargetClass().equals(that.getTargetClass())) {
                return getTargetMethod().compareTo(that.getTargetMethod());
            } else {
                return getTargetClass().compareTo(that.getTargetClass());
            }
        }
        return compareClassName(other);
    }

    @Override
    public int hashCode() {
        return Objects.hash(reachabilityCoverageGoal);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        ReachabilityTestFitnessFunction that = (ReachabilityTestFitnessFunction) other;
        return Objects.equals(reachabilityCoverageGoal, that.reachabilityCoverageGoal);
    }

    @Override
    public String getTargetClass() {
        List<CallGraphEntry> calls = this.reachabilityCoverageGoal.getCalls();
        return calls.get(calls.size() - 1).getClassName();
    }

    @Override
    public String getTargetMethod() {
        List<CallGraphEntry> calls = this.reachabilityCoverageGoal.getCalls();
        return calls.get(calls.size() - 1).getMethodName();
    }

    @Override
    public String toString() {
        return "ReachabilityTestFitnessFunction{" +
                "goal=" + reachabilityCoverageGoal +
                '}';
    }
}
