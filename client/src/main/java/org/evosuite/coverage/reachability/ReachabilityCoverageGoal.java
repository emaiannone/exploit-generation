package org.evosuite.coverage.reachability;

import org.evosuite.graphs.cfg.ControlDependency;
import org.evosuite.setup.callgraph.CallGraphEntry;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class ReachabilityCoverageGoal implements Serializable {
    private final int id;
    private final List<CallUnit> callUnits;

    public ReachabilityCoverageGoal(int id, List<CallUnit> callUnits) {
        this.id = id;
        this.callUnits = callUnits;
    }

    public int getId() {
        return id;
    }

    public List<CallUnit> getCallUnits() {
        return Collections.unmodifiableList(callUnits);
    }

    public List<CallGraphEntry> getCalls() {
        return Collections.unmodifiableList(callUnits.stream()
                .map(CallUnit::getMethod)
                .collect(Collectors.toList())
        );
    }

    public List<ControlDependency> getControlDependencies(CallGraphEntry cge) {
        return callUnits.stream()
                .filter(cu -> cu.getMethod().equals(cge))
                .map(CallUnit::getControlDependencies)
                .findFirst().orElse(null);
    }

    public List<List<ControlDependency>> getControlDependencies() {
        return callUnits.stream()
                .map(CallUnit::getControlDependencies)
                .collect(Collectors.toList());
    }

    public List<Object> getControlDependenciesConstants() {
        return getControlDependencies()
                .stream()
                .flatMap(List::stream)
                .map(a -> a.getBranch().getValues())
                .flatMap(Set::stream)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

    @Override
    public String toString() {
        return String.format("[Goal #%s] %s", id,
                callUnits.stream().map(Object::toString).collect(Collectors.joining(" -> "))
        );
    }

    public static class CallUnit implements Serializable {
        private final CallGraphEntry method;
        private final List<ControlDependency> controlDependencies;

        public CallUnit(CallGraphEntry method, List<ControlDependency> controlDependencies) {
            this.method = method;
            this.controlDependencies = controlDependencies;
        }

        public CallGraphEntry getMethod() {
            return method;
        }

        public List<ControlDependency> getControlDependencies() {
            return Collections.unmodifiableList(controlDependencies);
        }

        @Override
        public String toString() {
            return String.format("%s {%s}", method, controlDependencies.stream().map(Objects::toString).collect(Collectors.joining(", ")));
        }
    }
}
