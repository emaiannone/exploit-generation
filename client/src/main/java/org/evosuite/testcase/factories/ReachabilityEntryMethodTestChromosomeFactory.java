package org.evosuite.testcase.factories;

import org.evosuite.Properties;
import org.evosuite.coverage.reachability.StaticPathsPool;
import org.evosuite.ga.ChromosomeFactory;
import org.evosuite.testcase.DefaultTestCase;
import org.evosuite.testcase.TestCase;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionTracer;
import org.evosuite.utils.*;
import org.evosuite.utils.generic.GenericExecutable;
import org.evosuite.utils.generic.GenericMethod;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

public class ReachabilityEntryMethodTestChromosomeFactory implements ChromosomeFactory<TestChromosome> {
    private static final GenerationLogger GENERATION_LOGGER = new GenerationLogger(Properties.GENERATION_LOG_FILE);
    private static final long serialVersionUID = -420224349882780857L;

    private static final List<GenericExecutable<?, ?>> allCalls = new ArrayList<>();
    private static final List<GenericExecutable<?, ?>> entryCalls = new ArrayList<>();
    private final ChromosomeFactory<TestChromosome> defaultFactory;

    public ReachabilityEntryMethodTestChromosomeFactory(ChromosomeFactory<TestChromosome> defaultFactory) {
        allCalls.addAll(ExecutablesHelper.getCallableExecutables());
        Set<String> methodsFromEntryToTarget = StaticPathsPool.getMethodsFromClassToTarget(Properties.TARGET_CLASS, Properties.REACHABILITY_TARGET_CLASS, Properties.REACHABILITY_TARGET_METHOD);
        if (!methodsFromEntryToTarget.isEmpty()) {
            entryCalls.addAll(ExecutablesHelper.selectExecutablesByNames(allCalls, methodsFromEntryToTarget));
        }
        if (entryCalls.isEmpty()) {
            GENERATION_LOGGER.write("There is no candidate method that could reach the target. The initial tests will be generated randomly.");
        } else {
            GENERATION_LOGGER.write("Trying to make the initial tests call one of the following:");
            for (GenericExecutable<?, ?> entryCall : entryCalls) {
                GENERATION_LOGGER.write(String.format("\t- %s", entryCall.getNameWithDescriptor()));
            }
        }
        this.defaultFactory = defaultFactory;
    }

    @Override
    public TestChromosome getChromosome() {
        if (entryCalls.isEmpty()) {
            TestChromosome chromosome = defaultFactory.getChromosome();
            GENERATION_LOGGER.write(String.format("\nGenerated random TestCase n.%s", chromosome.getTestCase().getID()));
            return chromosome;
        }
        TestChromosome chromosome = new TestChromosome();
        chromosome.setTestCase(generateValidTestCase(Properties.CHROMOSOME_LENGTH, Properties.MAX_ATTEMPTS));
        return chromosome;
    }

    private TestCase generateValidTestCase(int chromosomeLength, int maxAttempts) {
        boolean tracerEnabled = ExecutionTracer.isEnabled();
        if (tracerEnabled) {
            ExecutionTracer.disable();
        }
        TestCase test = tryGenerateTestWithEntryMethodCall(chromosomeLength, maxAttempts);
        if (tracerEnabled) {
            ExecutionTracer.enable();
        }
        return test;
    }

    private TestCase tryGenerateTestWithEntryMethodCall(int maxTestLength, int maxAttempts) {
        GenericExecutable<?, ?> entryExecutableToAppend = Randomness.choice(entryCalls);
        if (entryExecutableToAppend == null) {
            return defaultFactory.getChromosome().getTestCase();
        }
        TestCase test = new DefaultTestCase();
        GENERATION_LOGGER.write(String.format("\nGenerated TestCase n.%s", test.getID()));
        GENERATION_LOGGER.write(String.format("Trying to append the entry method (%s)...", entryExecutableToAppend.getNameWithDescriptor()));
        boolean appended = ReachabilityTestCaseModifier.tryToAppend(entryExecutableToAppend, test, maxAttempts);
        if (!appended || test.isEmpty()) {
            GENERATION_LOGGER.write("\t[FAILED]");
            GENERATION_LOGGER.write(String.format("Generating random code for TestCase n.%s", test.getID()));
            test = defaultFactory.getChromosome().getTestCase();
            return test;
        }
        GENERATION_LOGGER.write("\t[SUCCESS]");
        GENERATION_LOGGER.write(String.format("Code with the entry method call:\n%s", GenerationLoggerHelper.testCaseToString(test, maxTestLength)));
        int lastInitStatementPosition = test.size() - 2;

        // Try to add calls before the entry method
        if (test.size() < maxTestLength && Randomness.nextDouble() <= Properties.P_ADD_CALLS_BEFORE_ENTRY_METHOD) {
            GENERATION_LOGGER.write("Trying to add calls before the entry method...");
            Collection<? extends GenericMethod> callsAdded = ReachabilityTestCaseModifier.tryToAddCallsBeforeEntryCall(test, maxTestLength, maxAttempts);
            if (callsAdded == null || callsAdded.isEmpty()) {
                GENERATION_LOGGER.write("Failed to add calls before the entry method");
            } else {
                GENERATION_LOGGER.write(String.format("Code with added calls before the entry method:\n%s", GenerationLoggerHelper.testCaseToString(test, maxTestLength)));
            }
        }

        return test;
    }

}
