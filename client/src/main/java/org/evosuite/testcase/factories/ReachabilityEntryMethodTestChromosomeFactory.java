package org.evosuite.testcase.factories;

import org.evosuite.Properties;
import org.evosuite.coverage.reachability.ExecutablesHelper;
import org.evosuite.coverage.reachability.StaticPathsPool;
import org.evosuite.ga.ChromosomeFactory;
import org.evosuite.testcase.DefaultTestCase;
import org.evosuite.testcase.TestCase;
import org.evosuite.testcase.TestChromosome;
import org.evosuite.testcase.execution.ExecutionTracer;
import org.evosuite.utils.GenerationLogger;
import org.evosuite.utils.GenerationLoggerHelper;
import org.evosuite.utils.Randomness;
import org.evosuite.utils.generic.GenericExecutable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class ReachabilityEntryMethodTestChromosomeFactory implements ChromosomeFactory<TestChromosome> {
    private static final GenerationLogger GENERATION_LOGGER = new GenerationLogger(Properties.GENERATION_LOG_FILE);
    private static final long serialVersionUID = -420224349882780857L;

    private static final List<GenericExecutable<?, ?>> possibleCalls = new ArrayList<>();
    private static final List<GenericExecutable<?, ?>> desiredCalls = new ArrayList<>();
    private final ChromosomeFactory<TestChromosome> defaultFactory;

    public ReachabilityEntryMethodTestChromosomeFactory(ChromosomeFactory<TestChromosome> defaultFactory) {
        possibleCalls.addAll(ExecutablesHelper.getPossibleExecutables());
        Set<String> methodsFromEntryToTarget = StaticPathsPool.getMethodsFromClassToTarget(Properties.TARGET_CLASS, Properties.REACHABILITY_TARGET_CLASS, Properties.REACHABILITY_TARGET_METHOD);
        /*
        GENERATION_LOGGER.write("CALLABLES:");
        for (GenericExecutable<?, ?> m : callableMethods) {
            GENERATION_LOGGER.write(String.format("\t- %s", m));
        }
        GENERATION_LOGGER.write("METHODS IN PATHS:");
        for (String m : methodsInPaths) {
            GENERATION_LOGGER.write(String.format("\t- %s", m));
        }
         */
        if (!methodsFromEntryToTarget.isEmpty()) {
            desiredCalls.addAll(ExecutablesHelper.selectExecutablesByNames(possibleCalls, methodsFromEntryToTarget));
        }
        if (desiredCalls.isEmpty()) {
            GENERATION_LOGGER.write("There is no candidate method that could reach the target. The initial tests will be generated randomly.");
        } else {
            GENERATION_LOGGER.write("Trying to make the initial tests call one of the following:");
            for (GenericExecutable<?, ?> desiredCall : desiredCalls) {
                GENERATION_LOGGER.write(String.format("\t- %s", desiredCall.getNameWithDescriptor()));
            }
        }
        this.defaultFactory = defaultFactory;
    }

    @Override
    public TestChromosome getChromosome() {
        if (desiredCalls.isEmpty()) {
            return defaultFactory.getChromosome();
        }
        TestChromosome chromosome = new TestChromosome();
        chromosome.setTestCase(getRandomTestCase(Properties.CHROMOSOME_LENGTH, Properties.MAX_ATTEMPTS));
        return chromosome;
    }

    private TestCase getRandomTestCase(int chromosomeLength, int maxAttempts) {
        boolean tracerEnabled = ExecutionTracer.isEnabled();
        if (tracerEnabled) {
            ExecutionTracer.disable();
        }

        TestCase test;
        boolean shouldUseEmptyTest = Randomness.nextDouble() < 0.2;
        if (shouldUseEmptyTest) {
            test = new DefaultTestCase();
            GENERATION_LOGGER.write(String.format("Generated empty TestCase n.%s", test.getID()));
            ExecutablesHelper.tryToAddAnExecutableIntoTest(desiredCalls, test, Properties.MAX_ATTEMPTS / 100, false);
        } else {
            test = defaultFactory.getChromosome().getTestCase();
            GENERATION_LOGGER.write(String.format("Generated a random TestCase n.%s", test.getID()));
            GENERATION_LOGGER.write(String.format("Code (%s statements):", test.size()));
            GENERATION_LOGGER.write(GenerationLoggerHelper.testCaseToString(test, 4));
            for (int attempts = 0; attempts < maxAttempts; attempts++) {
                if (test.size() >= chromosomeLength) {
                    GENERATION_LOGGER.write(String.format("\tRe-generating TestCase %s with %s statements", test.getID(), test.size()));
                    test = defaultFactory.getChromosome().getTestCase();
                    break;
                }
            }
            boolean shouldTryToSeedCall = Randomness.nextDouble() < 0.8;
            if (shouldTryToSeedCall) {
                ExecutablesHelper.tryToAddAnExecutableIntoTest(desiredCalls, test, Properties.MAX_ATTEMPTS / 100, true);
            }
        }

        if (tracerEnabled) {
            ExecutionTracer.enable();
        }
        return test;
    }
}
