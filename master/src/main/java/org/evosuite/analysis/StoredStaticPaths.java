package org.evosuite.analysis;

import org.evosuite.coverage.reachability.StaticPath;

import java.util.*;

public class StoredStaticPaths {
    private static final Map<String, Map<String, Set<StaticPath>>> staticPathsToTarget = new LinkedHashMap<>();

    public static Map<String, Map<String, Set<StaticPath>>> getStaticPathsToTarget() {
        return Collections.unmodifiableMap(staticPathsToTarget);
    }

    public static void addAllIfNotExists(Set<StaticPath> newStaticPaths) {
        for (StaticPath newStaticPath : newStaticPaths) {
            String className = newStaticPath.getFinalNode().getClassName();
            String methodName = newStaticPath.getFinalNode().getMethodName();
            Map<String, Set<StaticPath>> staticPathsToClass = staticPathsToTarget.get(className);
            if (staticPathsToClass == null) {
                Map<String, Set<StaticPath>> staticPathsToMethod = new LinkedHashMap<>();
                staticPathsToMethod.put(methodName, newStaticPaths);
                staticPathsToTarget.put(className, staticPathsToMethod);
            }
            if (staticPathsToClass != null && !staticPathsToClass.containsKey(methodName)) {
                staticPathsToClass.put(methodName, newStaticPaths);
            }
        }
    }

    public static Set<StaticPath> getStaticPathsToTarget(String className, String methodName) {
        Map<String, Set<StaticPath>> staticPathsToClass = staticPathsToTarget.get(className);
        if (staticPathsToClass != null && staticPathsToClass.containsKey(methodName)) {
            return staticPathsToClass.get(methodName);
        }
        return new LinkedHashSet<>();
    }

    public void clear() {
        staticPathsToTarget.clear();
    }
}
