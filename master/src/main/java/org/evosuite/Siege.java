package org.evosuite;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.result.TestGenerationResult;
import org.evosuite.testcase.TestChromosome;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

public class Siege {
    protected static Logger logger = LoggerFactory.getLogger(Siege.class);

    public static void main(String[] args) {
        EvoSuite evoSuite = new EvoSuite();

        Options options = new Options();
        options.addOption(new Option("clientCP", true, "Client project classpath. A fully qualifying needs to be provided, e.g. org.foo.SomeClass"));
        options.addOption(new Option("client", true, "Client class where an exploit will start from. A fully qualifying needs to be provided, e.g. org.foo.SomeClass"));
        options.addOption(new Option("vulnClass", true, "Vulnerable class to be targeted by an exploit. A fully qualifying needs to be provided, e.g. org.foo.SomeClass"));
        options.addOption(new Option("vulnMethod", true, "Vulnerable method to be targeted by an exploit. A name and descriptor needs to be provided, e.g. someMethod([B[B)Z"));
        options.addOption(new Option("vulnLine", true, "Vulnerable line to be targeted by an exploit. A non negative number needs to be provided, e.g. 12"));

        String clientCP = "";
        String client = "";
        String vulnClass = "";
        String vulnMethod = "";
        String vulnLine = "";
        String budget = "";
        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine line = parser.parse(options, args);
            if (!line.hasOption("clientCP")) {
                throw new IllegalArgumentException("clientCP option needs to be specified");
            }
            if (!line.hasOption("client")) {
                throw new IllegalArgumentException("client option needs to be specified");
            }
            if (!line.hasOption("vulnClass")) {
                throw new IllegalArgumentException("vulnClass option needs to be specified");
            }
            if (!line.hasOption("vulnMethod")) {
                throw new IllegalArgumentException("vulnMethod option needs to be specified");
            }
            if (!line.hasOption("vulnLine")) {
                throw new IllegalArgumentException("vulnLine option needs to be specified");
            }
            clientCP = line.getOptionValue("clientCP");
            client = line.getOptionValue("client");
            vulnClass = line.getOptionValue("vulnClass");
            vulnMethod = line.getOptionValue("vulnMethod");
            vulnLine = line.getOptionValue("vulnLine");
            if (line.hasOption("budget")) {
                budget = line.getOptionValue("budget");
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }

        // Default search budget for tests is 60 (the meaning depends on stopping condition).
        if (!budget.equals("")) {
            try {
                Properties.SEARCH_BUDGET = Long.parseLong(budget);
            } catch (NumberFormatException e) {
                logger.error("Invalid search budget: using default value.");
            }
        }

        // TODO Bound population?
        // TODO Is there a way not to stop the generation when all the TC have the same fitness? Which MH is the best?
        String[] evoSuiteCommand = new String[]{"-generateTests",
                "-Dstrategy=" + Properties.Strategy.ONEBRANCH.name(),
                "-criterion", Properties.Criterion.VULNERABILITY.name(),
                "-Dinstrument_context=true",
                "-Dinstrument_method_calls=true",
                "-Dinstrument_libraries=true",
                "-Dassertions=false",
                "-Dminimize=true",
                "-Dstopping_condition=" + Properties.StoppingCondition.MAXTIME,
                "-Dpopulation=" + 100,
                "-Djunit_suffix=SiegeTest",
                "-projectCP", clientCP,
                "-class", client,
                "-DvulnClass=" + vulnClass,
                "-DvulnMethod=" + vulnMethod,
                "-DvulnLine=" + vulnLine};
        try {
            List<List<TestGenerationResult>> results = (List<List<TestGenerationResult>>) evoSuite.parseCommandLine(evoSuiteCommand);
            TestGenerationResult result = results.get(0).get(0);
            GeneticAlgorithm<?> ga = result.getGeneticAlgorithm();

            TestChromosome best = (TestChromosome) ga.getBestIndividual();
            System.out.printf("Terminated (with %d seconds)! Age: %d, Population Size: %d%n", Properties.SEARCH_BUDGET, ga.getAge(), ga.getPopulationSize());
            System.out.printf("Best Individual %d (Gen %d, Eval %d):%n%n", best.getTestCase().getID(), best.getAge(), best.getNumberOfEvaluations());
            System.out.println(best.getTestCase().toCode());
            System.out.printf("Best Individual after Minimization:%n%n");
            System.out.println(result.getTestCase("test0").toCode());
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        System.exit(0);
    }
}
