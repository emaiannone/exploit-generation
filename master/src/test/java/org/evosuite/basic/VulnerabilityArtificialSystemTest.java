package org.evosuite.basic;

import com.examples.with.different.packagename.artificial.compress1.CompressCallerFlexible;
import com.examples.with.different.packagename.artificial.compress1.CompressCallerNo;
import com.examples.with.different.packagename.artificial.compress1.CompressCallerYes;
import com.examples.with.different.packagename.artificial.tomcat1.TomcatCallerFlexible;
import com.examples.with.different.packagename.artificial.tomcat1.TomcatCallerNo;
import com.examples.with.different.packagename.artificial.tomcat1.TomcatCallerYes;
import org.apache.catalina.core.StandardWrapper;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@RunWith(Parameterized.class)
public class VulnerabilityArtificialSystemTest extends SystemTestBase {

    private EvoSuite evosuite;
    //private static final String CP = "/home/emaia/IdeaProjects/exploit-generation/client/target/test-classes";
    private String targetClass;
    private String vulnerableClass;
    private String vulnerableMethod;
    private String vulnerableLine;

    /**
     * <p>
     * Provide the test input values for all test method in this class.
     * </p>
     *
     * @return a collection of object arrays, whose rows represent the test input values for each test case.
     */
    @Parameterized.Parameters
    public static Collection<Object[]> inputs() {
        return Arrays.asList(new Object[][]{
                //{TomcatCallerNo.class.getName(), StandardWrapper.class.getName(), "servletSecurityAnnotationScan()V", "1139"},
                //{TomcatCallerYes.class.getName(), StandardWrapper.class.getName(), "servletSecurityAnnotationScan()V", "1139"},
                //{TomcatCallerFlexible.class.getName(), StandardWrapper.class.getName(), "servletSecurityAnnotationScan()V", "1139"},
                //{CompressCallerNo.class.getName(), X0017_StrongEncryptionHeader.class.getName(), "parseCentralDirectoryFormat([BII)V", "313"},
                //TODO Investigate: for goal0 (that starts with callHit()) only, there are no executed contexts. Why?
                {CompressCallerYes.class.getName(), X0017_StrongEncryptionHeader.class.getName(), "parseCentralDirectoryFormat([BII)V", "313"},
                //{CompressCallerFlexible.class.getName(), X0017_StrongEncryptionHeader.class.getName(), "parseCentralDirectoryFormat([BII)V", "313"},
        });
    }

    public VulnerabilityArtificialSystemTest(String targetClass, String vulnerableClass, String vulnerableMethod, String vulnerableLine) {
        this.targetClass = targetClass;
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
    }

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    /**
     * <p>
     * Test the novel Vulnerability coverage criterion.
     * </p>
     * <p>
     * This test only works on client module classes only, so excluding all other useless classes.
     * </p>
     * <p>
     * This test, as required by the Vulnerability criterion, instruments the call context, meaning that it won't stop on the target class but traverse the statically called classes/methods.
     * </p>
     * <p>
     * The other inputs from this test come from the JUnit Parametric tests, that passes it:
     * <ul>
     *     <li><b>the target class</b> (a.k.a., CUT), the starting point for exploit generation, i.e., a class of a certain project;</li>
     *     <li><b>the vulnerable class</b>, the class affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable method</b>, the method affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable line</b>, the line affected by a certain target vulnerability;</li>
     * </ul>
     * </p>
     */
    @Test
    public void vulnerabilityCriterion() {
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_LIBRARIES = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.INSTRUMENT_PARENT = true;

        String[] command = new String[]{"-generateSuite",
                //"-projectCP", CP,
                "-class", targetClass,
                "-DvulnClass=" + vulnerableClass,
                "-DvulnMethod=" + vulnerableMethod,
                "-DvulnLine=" + vulnerableLine};
        Object result = evosuite.parseCommandLine(command);
        // TODO Why goal preparation is called multiple times?

        GeneticAlgorithm<?> ga = getGAFromResult(result);

        List<TestSuiteChromosome> finalPopulation = (List<TestSuiteChromosome>) ga.getPopulation();
        finalPopulation.forEach(suite -> System.out.println("Suite " + suite.hashCode() + " " + suite.getTestChromosomes().stream().map(tc -> tc.getTestCase().getID()).collect(Collectors.toList())));

        // Avoid any empty suite
        TestSuiteChromosome best = finalPopulation.stream().filter(suite -> suite.size() > 0).collect(Collectors.toList()).get(0);
        System.out.println("Best Test Suite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }
}
