package org.evosuite.basic;

import com.examples.with.different.packagename.artificial.compress.CompressCallerFlexible;
import com.examples.with.different.packagename.artificial.compress.CompressCallerNo;
import com.examples.with.different.packagename.artificial.compress.CompressCallerYes;
import com.examples.with.different.packagename.artificial.fileupload.FileuploadCallerFlexible;
import com.examples.with.different.packagename.artificial.fileupload.FileuploadCallerYes;
import com.examples.with.different.packagename.artificial.httpclient.HttpclientCallerFlexible;
import com.examples.with.different.packagename.artificial.httpclient.HttpclientCallerYes;
import com.examples.with.different.packagename.artificial.jasypt.JasyptCallerFlexible;
import com.examples.with.different.packagename.artificial.jasypt.JasyptCallerNo;
import com.examples.with.different.packagename.artificial.jasypt.JasyptCallerYes;
import com.examples.with.different.packagename.artificial.jenkinscore.JenkinsCoreCallerFlexible;
import com.examples.with.different.packagename.artificial.jenkinscore.JenkinsCoreCallerNo;
import com.examples.with.different.packagename.artificial.jenkinscore.JenkinsCoreCallerYes;
import com.examples.with.different.packagename.artificial.jenkinsmailer.JenkinsMailerCallerHard;
import com.examples.with.different.packagename.artificial.jenkinsmultijob.JenkinsMultijobCallerFlexible;
import com.examples.with.different.packagename.artificial.jenkinsmultijob.JenkinsMultijobCallerNo;
import com.examples.with.different.packagename.artificial.jenkinsmultijob.JenkinsMultijobCallerYes;
import com.examples.with.different.packagename.artificial.nifi.NifiCallerHard;
import com.examples.with.different.packagename.artificial.primefaces.PrimefacesCallerHard;
import com.examples.with.different.packagename.artificial.tomcat.TomcatCallerFlexible;
import com.examples.with.different.packagename.artificial.tomcat.TomcatCallerNo;
import com.examples.with.different.packagename.artificial.tomcat.TomcatCallerYes;
import com.examples.with.different.packagename.artificial.zeppelin.ZeppelinCallerFlexible;
import com.examples.with.different.packagename.artificial.zeppelin.ZeppelinCallerYes;
import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.testcase.TestChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class VulnerabilityArtificialSystemTest extends SystemTestBase {

    private EvoSuite evosuite;
    //private static final String CP = "/home/emaia/IdeaProjects/exploit-generation/client/target/test-classes";
    private String targetClass;
    private String vulnerableClass;
    private String vulnerableMethod;
    private String vulnerableLine;
    private boolean shouldSucceed;

    /**
     * <p>
     * Provide the test input values for all test method in this class.
     * </p>
     *
     * @return a collection of object arrays, whose rows represent the test input values for each test case.
     */
    @Parameterized.Parameters
    public static Collection<Object[]> inputs() {
        return Arrays.asList(new Object[][]{
                // Some tests fail if done with others
                {CompressCallerNo.class.getName(), "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "parseCentralDirectoryFormat([BII)V", "313", false},
                {CompressCallerYes.class.getName(), "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "parseCentralDirectoryFormat([BII)V", "313", true},
                {CompressCallerFlexible.class.getName(), "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "parseCentralDirectoryFormat([BII)V", "313", true},
                {TomcatCallerNo.class.getName(), "org.apache.catalina.core.StandardWrapper", "servletSecurityAnnotationScan()V", "1139", false},
                {TomcatCallerYes.class.getName(), "org.apache.catalina.core.StandardWrapper", "servletSecurityAnnotationScan()V", "1139", true},
                {TomcatCallerFlexible.class.getName(), "org.apache.catalina.core.StandardWrapper", "servletSecurityAnnotationScan()V", "1139", true},
                {JasyptCallerNo.class.getName(), "org.jasypt.digest.StandardByteDigester", "matches([B[B)Z", "1102", false},
                {JasyptCallerYes.class.getName(), "org.jasypt.digest.StandardByteDigester", "matches([B[B)Z", "1102", true},
                {JasyptCallerFlexible.class.getName(), "org.jasypt.digest.StandardByteDigester", "matches([B[B)Z", "1102", true},
                {JenkinsCoreCallerNo.class.getName(), "hudson.ProxyConfiguration$DescriptorImpl", "doValidateProxy(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lhudson/util/FormValidation;", "344", false},
                {JenkinsCoreCallerYes.class.getName(), "hudson.ProxyConfiguration$DescriptorImpl", "doValidateProxy(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lhudson/util/FormValidation;", "344", true},
                {JenkinsCoreCallerFlexible.class.getName(), "hudson.ProxyConfiguration$DescriptorImpl", "doValidateProxy(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lhudson/util/FormValidation;", "344", true},
                {JenkinsMultijobCallerNo.class.getName(), "com.tikal.jenkins.plugins.multijob.MultiJobResumeBuild", "getTarget()Ljava/lang/Object;", "78", false},
                {JenkinsMultijobCallerYes.class.getName(), "com.tikal.jenkins.plugins.multijob.MultiJobResumeBuild", "getTarget()Ljava/lang/Object;", "78", true},
                {JenkinsMultijobCallerFlexible.class.getName(), "com.tikal.jenkins.plugins.multijob.MultiJobResumeBuild", "getTarget()Ljava/lang/Object;", "78", true},
                {FileuploadCallerYes.class.getName(), "org.apache.commons.fileupload.MultipartStream", "<init>(Ljava/io/InputStream;[BILorg/apache/commons/fileupload/MultipartStream$ProgressNotifier;)V", "329", true},
                {FileuploadCallerFlexible.class.getName(), "org.apache.commons.fileupload.MultipartStream", "<init>(Ljava/io/InputStream;[BILorg/apache/commons/fileupload/MultipartStream$ProgressNotifier;)V", "329", true},
                {HttpclientCallerYes.class.getName(), "org.apache.http.client.protocol.RequestProxyAuthentication", "process(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V", "78", true},
                {HttpclientCallerFlexible.class.getName(), "org.apache.http.client.protocol.RequestProxyAuthentication", "process(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V", "78", true},
                {ZeppelinCallerYes.class.getName(), "org.apache.zeppelin.rest.GetUserList", "getUserList(Lorg/apache/shiro/realm/jdbc/JdbcRealm;)Ljava/util/List;", "130", true},
                {ZeppelinCallerFlexible.class.getName(), "org.apache.zeppelin.rest.GetUserList", "getUserList(Lorg/apache/shiro/realm/jdbc/JdbcRealm;)Ljava/util/List;", "130", true},
                {NifiCallerHard.class.getName(), "org.apache.nifi.cluster.coordination.http.replication.okhttp.OkHttpReplicationClient", "prepareRequest(Ljava/lang/String;Ljava/util/Map;Ljava/lang/Object;)Lorg/apache/nifi/cluster/coordination/http/replication/PreparedRequest;", "97", false},
                {JenkinsMailerCallerHard.class.getName(), "hudson.tasks.Mailer$DescriptorImpl", "doSendTestMail(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Lhudson/util/Secret;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lhudson/util/FormValidation;", "566", false},
                {PrimefacesCallerHard.class.getName(), "org.primefaces.application.DialogNavigationHandler", "handleNavigation(Ljavax/faces/context/FacesContext;Ljava/lang/String;Ljava/lang/String;)V", "86", false},
        });
    }

    public VulnerabilityArtificialSystemTest(String targetClass, String vulnerableClass, String vulnerableMethod, String vulnerableLine, boolean shouldSucceed) {
        this.targetClass = targetClass;
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
        this.shouldSucceed = shouldSucceed;
    }

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    /**
     * <p>
     * Test the novel Vulnerability coverage criterion.
     * </p>
     * <p>
     * This test only works on client module classes only, so excluding all other useless classes.
     * </p>
     * <p>
     * This test, as required by the Vulnerability criterion, instruments the call context, meaning that it won't stop on the target class but traverse the statically called classes/methods.
     * </p>
     * <p>
     * The other inputs from this test come from the JUnit Parametric tests, that passes it:
     * <ul>
     *     <li><b>the target class</b> (a.k.a., CUT), the starting point for exploit generation, i.e., a class of a certain project;</li>
     *     <li><b>the vulnerable class</b>, the class affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable method</b>, the method affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable line</b>, the line affected by a certain target vulnerability;</li>
     * </ul>
     * </p>
     */
    @Test
    public void vulnerabilityCriterion() {
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;

        // This, plus -generateTests options disables WholeSuite (that required a fix in IndividualTestStrategy class, though)
        Properties.STRATEGY = Properties.Strategy.ONEBRANCH;
        // Minimization seems useless because we just need a single TC
        Properties.MINIMIZE = false;

        //TODO Is there a way not to stop the generation when all the TC have the same fitness
        //Properties.ALGORITHM = Properties.Algorithm.STANDARD_GA;
        //Properties.SEARCH_BUDGET = 60;
        //Properties.POPULATION = 60;

        String[] command = new String[]{"-generateTests",
                //"-projectCP", CP,
                "-class", targetClass,
                "-DvulnClass=" + vulnerableClass,
                "-DvulnMethod=" + vulnerableMethod,
                "-DvulnLine=" + vulnerableLine};
        Object result = evosuite.parseCommandLine(command);
        try {
            GeneticAlgorithm<?> ga = getGAFromResult(result);
            TestChromosome best = (TestChromosome) ga.getBestIndividual();
            System.out.println(String.format("### Best TC %d (Gen %d, Eval %d) ###", best.getTestCase().getID(), best.getAge(), best.getNumberOfEvaluations()));
            best.getTestCase().iterator().forEachRemaining(st -> System.out.println('\t' + st.getCode()));
            Assert.assertEquals("Non-optimal fitness: ", 0.0, best.getFitness(), 0.001);
        } catch (Throwable t) {
            t.printStackTrace(System.out);
            if (shouldSucceed) {
                Assert.fail();
            }
        }
    }
}
