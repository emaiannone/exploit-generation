package org.evosuite.basic;

import com.examples.with.different.packagename.myapp.*;
import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.setup.DependencyAnalysis;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class VulnerabilitySystemTest extends SystemTestBase {

    private EvoSuite evosuite;

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    @Test
    public void testVulnerabilityFitnessInternal() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsInternal.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass=com.examples.with.different.packagename.myapp.VulnerableClassInternal", "-DvulnMethod=vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine=23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJAR() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectly.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.VulnerableClassJAR", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessIndirectJAR() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARIndirectly.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.VulnerableClassJAR", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJARHierarchyV1() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectlyHierarchyV1.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.hierarchy.VulnerableSuper", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJARHierarchyV2() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectlyHierarchyV2.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.hierarchy.VulnerableSuper", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test // CVE-2018-1000134
    public void testVulnerabilityFitnessArtificialLDAP() {
        String targetClass = MyCUTCallsLDAP.class.getName();
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.INSTRUMENT_LIBRARIES = true;
        //Properties.TT = true;
        //Properties.INSTRUMENT_PARENT = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};
        Properties.CLIENT_ON_THREAD = true;
        // TODO Change CLI command
        String vulnClass = "com.unboundid.ldap.sdk.SimpleBindRequest";
        String vulnMethod = "process(Lcom/unboundid/ldap/sdk/LDAPConnection;I)Lcom/unboundid/ldap/sdk/BindResult;";
        String vulnLine = "519";

        //String vulnClass = "com.unboundid.ldap.sdk.SimpleBindRequest";
        //String vulnMethod = "getBindType()Ljava/lang/String;";
        //String vulnLine = "821";

        //String vulnClass = "com.unboundid.ldap.sdk.LDAPConnection";
        //String vulnMethod = "connect(Ljava/lang/String;Ljava/net/InetAddress;II)V";
        //String vulnLine = "821";

        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", vulnClass, "-DvulnMethod", vulnMethod, "-DvulnLine", vulnLine};
        Object result = evosuite.parseCommandLine(command);
        System.out.println("AAAAAAAAAAAAAA");
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        System.out.println("UFFAAAAAAAAAAAAA");
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    /* Spring tests
    //The Spring that I would like to have it working
    this("org.springframework.webflow.mvc.view.AbstractMvcView",
            "addEmptyValueMapping(Lorg/springframework/binding/mapping/impl/DefaultMapper;Ljava/lang/String;Ljava/lang/Object;)V",
            485);
    */
    /* A Spring alternative
    this("org.springframework.webflow.mvc.view.AbstractMvcView",
            "processUserEvent()V",
            213);
    */
    /* A Spring alternative that DO NOT works
    this("org.springframework.webflow.action.AbstractAction",
            "afterPropertiesSet()V",
            57);
    */
    /* A Spring alternative that works
    this("org.springframework.webflow.action.EventFactorySupport",
            "getYesEventId()Ljava/lang/String;",
            120);
    */
    /* A Spring alternative that works
    this("org.springframework.webflow.action.EventFactorySupport",
            "event(Ljava/lang/Object;Z)Lorg/springframework/webflow/execution/Event;",
            219);
    */

    /*
    @Test
    public void testVulnerabilityFitnessSpring() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTSpring.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }
     */
}
