package org.evosuite.basic;

import com.examples.with.different.packagename.myapp.*;
import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class VulnerabilitySystemTest extends SystemTestBase {

    private EvoSuite evosuite;

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    @Test
    public void testVulnerabilityFitnessInternal() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsInternal.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass=com.examples.with.different.packagename.myapp.VulnerableClassInternal", "-DvulnMethod=vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine=23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJAR() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectly.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.VulnerableClassJAR", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessIndirectJAR() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARIndirectly.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.VulnerableClassJAR", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJARHierarchyV1() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectlyHierarchyV1.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.hierarchy.VulnerableSuper", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitnessDirectJARHierarchyV2() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUTCallsJARDirectlyHierarchyV2.class.getName();

        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass", "org.example.hierarchy.VulnerableSuper", "-DvulnMethod", "vulnerableMethod(Ljava/lang/String;)V", "-DvulnLine", "23"};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }
}
