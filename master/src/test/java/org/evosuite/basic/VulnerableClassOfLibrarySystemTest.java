package org.evosuite.basic;

import com.examples.with.different.packagename.myapp.MyCUT2;
import com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary;
import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.strategy.TestGenerationStrategy;
import org.evosuite.testcase.execution.ExecutionTrace;
import org.evosuite.testcase.execution.ExecutionTracer;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.logging.ConsoleHandler;
import java.util.logging.Level;

public class VulnerableClassOfLibrarySystemTest extends SystemTestBase {

    @Test
    public void testVulnerableClassOfLibraryClassicFitness() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = VulnerableClassOfLibrary.class.getCanonicalName();
        Properties.TARGET_CLASS = targetClass;

        // CLI commands
        String[] command = new String[]{"-generateSuite", /*"-Dcrossover_function=MY",*/ "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);

        // Get number of test goals of the (single) fitness and coverage of best suite
        int goals = TestGenerationStrategy.getFitnessFactories().get(0).getCoverageGoals().size(); // assuming single fitness function
        //Assert.assertEquals("Wrong number of goals: ", 5, goals);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerableClassOfLibraryMyFitness() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = VulnerableClassOfLibrary.class.getCanonicalName();
        String targetMethod = "vulnerableMethodOfLibrary(Ljava/lang/String;)V";
        // Method methodOfLibrary = VulnerableClassOfLibrary.class.getMethod("vulnerableMethodOfLibrary", String.class);
        // System.out.println(targetMethod);
        // TODO: How to pass specific inputs?
        Properties.TARGET_CLASS = targetClass;
        Properties.TARGET_METHOD = targetMethod;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.MY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testMyCUT2CallsVuln2() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUT2.class.getCanonicalName();
        String targetMethod = "callsVuln2(Ljava/lang/String;)V";
        // TODO: How to pass specific inputs?
        Properties.TARGET_CLASS = targetClass;
        Properties.TARGET_METHOD = targetMethod;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.MY};
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        ExecutionTracer.enableContext();
        ExecutionTracer.enableTraceCalls();

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testIBranch() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUT2.class.getName();

        // Method methodOfLibrary = VulnerableClassOfLibrary.class.getMethod("vulnerableMethodOfLibrary", String.class);
        // System.out.println(targetMethod);
        // TODO: How to pass specific inputs?
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.IBRANCH};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }

    @Test
    public void testVulnerabilityFitness() {
        // Set-up global properties
        EvoSuite evosuite = new EvoSuite();
        String targetClass = MyCUT2.class.getName();

        // Method methodOfLibrary = VulnerableClassOfLibrary.class.getMethod("vulnerableMethodOfLibrary", String.class);
        // System.out.println(targetMethod);
        // TODO: How to pass vulnerable class, method and target input?
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_METHOD_CALLS = true;
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};

        // CLI commands
        String[] command = new String[]{"-generateSuite", "-class", targetClass};
        Object result = evosuite.parseCommandLine(command); // Summary of test generation

        // Get the executed GA instance and it best test suite
        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }


    // TODO: Useful code
    // Properties.INSTRUMENT_LIBRARIES = true;

    /*
    !!Definizione dei goal!!
    CallGraph callGraph = DependencyAnalysis.getCallGraph();
    Reachable classes: callGraph.getClassesUnderTest();
    Reverse called classes (d√† anche altre cose): callGraph.getClasses();
    Called classes: callGraph.isCalledClass("com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary")
    Called method: callGraph.isCalledMethod("com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary", "vulnerableMethodOfLibrary(Ljava/lang/String;)V")
    CallContexts (set sole method call VERSO target method of target class): callGraph.getAllContextsFromTargetClass("com.examples.with.different.packagename.vulnerableoss.VulnerableClassOfLibrary", "vulnerableMethodOfLibrary(Ljava/lang/String;)V");
     */

}
