package org.evosuite.basic;

import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class VulnerabilityToySystemTest extends SystemTestBase {

    private EvoSuite evosuite;
    private static final String CP = "/home/emaia/IdeaProjects/exploit-generation/client/target/test-classes";
    private String targetClass;
    private String vulnerableClass;
    private String vulnerableMethod;
    private String vulnerableLine;

    /**
     * <p>
     * Provide the test input values for all test method in this class.
     * </p>
     *
     * @return a collection of object arrays, whose rows represent the test input values for each test case.
     */
    @Parameters
    public static Collection<Object[]> inputs() {
        return Arrays.asList(new Object[][]{
                // Works fine
                {"com.examples.with.different.packagename.myapp.MyCUTCallsInternal", "com.examples.with.different.packagename.myapp.VulnerableClassInternal", "vulnerableMethod(Ljava/lang/String;)V", "23"},
                // Works fine
                {"com.examples.with.different.packagename.toy.MyCUTCreateClassBean", "it.unisa.adoctor.model.bean.ClassBean", "setTypeDeclaration(Lorg/eclipse/jdt/core/dom/TypeDeclaration;)V", "24"},
                // Works fine
                {"com.examples.with.different.packagename.toy.MyCUTAbortAnalysis", "it.unisa.adoctor.model.analysis.AnalysisDriver", "abortAnalysis()V", "51"},
                // Works but the analysis method take too long
                // {"com.examples.with.different.packagename.toy.MyCUTStartAnalysis", "it.unisa.adoctor.model.analysis.AnalysisDriver", "startAnalysis()Ljava/util/List;", "34"},
                // Works fine
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzeNotPolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "analyze(Lit/unisa/adoctor/model/bean/ClassBean;)Lit/unisa/adoctor/model/smell/DWSmell;", "20"},
                // Works, but the generation is too hard
                // {"com.examples.with.different.packagename.toy.MyCUTAnalyzeNotPolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "hasPowerManagerWakelockType(Lorg/eclipse/jdt/core/dom/Expression;)Z", "54"},
                // Does not work: target method not statically called -> not in call graph -> no CDG
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzeNotPolymorphic", "it.unisa.adoctor.model.smell.ClassSmell", "setClassBean(Lit/unisa/adoctor/model/bean/ClassBean;)V", "21"},
                // Does not work: target method not statically called -> not in call graph -> no CDG
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzePolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "analyze(Lit/unisa/adoctor/model/bean/ClassBean;)Lit/unisa/adoctor/model/smell/DWSmell;", "20"},
                // Does not work: target method not statically called -> not in call graph -> no CDG
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzePolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "hasPowerManagerWakelockType(Lorg/eclipse/jdt/core/dom/Expression;)Z", "54"},
                // Does not work: ClassSmell class is not loaded at all
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzePolymorphic", "it.unisa.adoctor.model.smell.ClassSmell", "setClassBean(Lit/unisa/adoctor/model/bean/ClassBean;)V", "21"},
        });
    }

    public VulnerabilityToySystemTest(String targetClass, String vulnerableClass, String vulnerableMethod, String vulnerableLine) {
        this.targetClass = targetClass;
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
    }

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    /**
     * <p>
     * Test the novel Vulnerability coverage criterion.
     * </p>
     * <p>
     * This test only works on client module classes only, so excluding all other useless classes.
     * </p>
     * <p>
     * This test, as required by the Vulnerability criterion, instruments the call context, meaning that it won't stop on the target class but traverse the statically called classes/methods.
     * </p>
     * <p>
     * The other inputs from this test come from the JUnit Parametric tests, that passes it:
     * <ul>
     *     <li><b>the target class</b> (a.k.a., CUT), the starting point for exploit generation, i.e., a class of a certain project;</li>
     *     <li><b>the vulnerable class</b>, the class affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable method</b>, the method affected by a certain target vulnerability;</li>
     *     <li><b>the vulnerable line</b>, the line affected by a certain target vulnerability;</li>
     * </ul>
     * </p>
     */
    @Test
    public void vulnerabilityCriterion() {
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;
        Properties.INSTRUMENT_PARENT = true;

        String[] command = new String[]{"-generateSuite",
                "-projectCP", CP,
                "-class", targetClass,
                "-DvulnClass=" + vulnerableClass,
                "-DvulnMethod=" + vulnerableMethod,
                "-DvulnLine=" + vulnerableLine};
        Object result = evosuite.parseCommandLine(command);

        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }
}
