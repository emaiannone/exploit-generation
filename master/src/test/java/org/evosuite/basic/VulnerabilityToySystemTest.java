package org.evosuite.basic;

import org.evosuite.EvoSuite;
import org.evosuite.Properties;
import org.evosuite.SystemTestBase;
import org.evosuite.ga.metaheuristics.GeneticAlgorithm;
import org.evosuite.testsuite.TestSuiteChromosome;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class VulnerabilityToySystemTest extends SystemTestBase {

    private EvoSuite evosuite;
    private String targetClass;
    private String vulnerableClass;
    private String vulnerableMethod;
    private String vulnerableLine;

    @Parameters
    public static Collection<Object[]> inputs() {
        return Arrays.asList(new Object[][]{
                //{"com.examples.with.different.packagename.myapp.MyCUTCallsInternal", "com.examples.with.different.packagename.myapp.VulnerableClassInternal", "vulnerableMethod(Ljava/lang/String;)V", "23"},
                //{"com.examples.with.different.packagename.toy.MyCUTCreateClassBean", "it.unisa.adoctor.model.bean.ClassBean", "setTypeDeclaration(Lorg/eclipse/jdt/core/dom/TypeDeclaration;)V", "24"},
                //{"com.examples.with.different.packagename.toy.MyCUTAbortAnalysis", "it.unisa.adoctor.model.analysis.AnalysisDriver", "abortAnalysis()V", "51"},
                //{"com.examples.with.different.packagename.toy.MyCUTStartAnalysis", "it.unisa.adoctor.model.analysis.AnalysisDriver", "startAnalysis()Ljava/util/List;", "34"},
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzeNotPolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "analyze(Lit/unisa/adoctor/model/bean/ClassBean;)Lit/unisa/adoctor/model/smell/DWSmell;", "20"},
                {"com.examples.with.different.packagename.toy.MyCUTAnalyzePolymorphic", "it.unisa.adoctor.model.analysis.analyzers.DWAnalyzer", "analyze(Lit/unisa/adoctor/model/bean/ClassBean;)Lit/unisa/adoctor/model/smell/DWSmell;", "20"},
        });
    }

    public VulnerabilityToySystemTest(String targetClass, String vulnerableClass, String vulnerableMethod, String vulnerableLine) {
        this.targetClass = targetClass;
        this.vulnerableClass = vulnerableClass;
        this.vulnerableMethod = vulnerableMethod;
        this.vulnerableLine = vulnerableLine;
    }

    @Before
    public void setUp() {
        this.evosuite = new EvoSuite();
    }

    @Test
    public void vulnerabilityCriterion() {
        Properties.CRITERION = new Properties.Criterion[]{Properties.Criterion.VULNERABILITY};
        Properties.TARGET_CLASS = targetClass;
        Properties.INSTRUMENT_CONTEXT = true;

        String[] command = new String[]{"-generateSuite", "-class", targetClass, "-DvulnClass=" + vulnerableClass, "-DvulnMethod=" + vulnerableMethod, "-DvulnLine=" + vulnerableLine};
        Object result = evosuite.parseCommandLine(command);

        GeneticAlgorithm<?> ga = getGAFromResult(result);
        TestSuiteChromosome best = (TestSuiteChromosome) ga.getBestIndividual();
        System.out.println("EvolvedTestSuite:\n" + best);
        Assert.assertEquals("Non-optimal coverage: ", 1d, best.getCoverage(), 0.001);
    }
}
